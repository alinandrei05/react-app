!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=26)}([function(e,t){e.exports=React},,,,,,function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return u}));var o=function(){return(o=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},r="undefined"==typeof window?e:window,i=r&&r.CSPSettings&&r.CSPSettings.nonce,s=function(){var e=r.__themeState__||{theme:void 0,lastStyleElement:void 0,registeredStyles:[]};e.runState||(e=o(o({},e),{perf:{count:0,duration:0},runState:{flushTimer:0,mode:0,buffer:[]}}));e.registeredThemableStyles||(e=o(o({},e),{registeredThemableStyles:[]}));return r.__themeState__=e,e}();function a(e,t){s.loadStyles?s.loadStyles(c(e).styleString,e):function(e){if("undefined"==typeof document)return;var t=document.getElementsByTagName("head")[0],n=document.createElement("style"),o=c(e),r=o.styleString,a=o.themable;n.setAttribute("data-load-themed-styles","true"),i&&n.setAttribute("nonce",i);n.appendChild(document.createTextNode(r)),s.perf.count++,t.appendChild(n);var u=document.createEvent("HTMLEvents");u.initEvent("styleinsert",!0,!1),u.args={newStyle:n},document.dispatchEvent(u);var l={styleElement:n,themableStyle:e};a?s.registeredThemableStyles.push(l):s.registeredStyles.push(l)}(e)}function u(e){s.theme=e,function(){if(s.theme){for(var e=[],t=0,n=s.registeredThemableStyles;t<n.length;t++){var o=n[t];e.push(o.themableStyle)}e.length>0&&(!function(e){void 0===e&&(e=3);3!==e&&2!==e||(l(s.registeredStyles),s.registeredStyles=[]);3!==e&&1!==e||(l(s.registeredThemableStyles),s.registeredThemableStyles=[])}(1),a([].concat.apply([],e)))}}()}function l(e){e.forEach((function(e){var t=e&&e.styleElement;t&&t.parentElement&&t.parentElement.removeChild(t)}))}function c(e){var t=s.theme,n=!1;return{styleString:(e||[]).map((function(e){var o=e.theme;if(o){n=!0;var r=t?t[o]:void 0,i=e.defaultValue||"inherit";return!t||r||!console||o in t||"undefined"==typeof DEBUG||!DEBUG||console.warn('Theming value not provided for "'+o+'". Falling back to "'+i+'".'),r||i}return e.rawString})).join(""),themable:n}}}).call(this,n(25))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var o={},r=void 0;try{r=window}catch(e){}function i(e,t){if(void 0!==r){var n=r.__packages__=r.__packages__||{};if(!n[e]||!o[e])o[e]=t,(n[e]=n[e]||[]).push(t)}}i("@uifabric/set-version","6.0.0")},,,,,,,,,,,,function(e,t,n){var o=n(22),r=n(23);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);e.exports=r.locals||{}},function(e,t,n){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function a(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},o=[],r=0;r<e.length;r++){var i=e[r],u=t.base?i[0]+t.base:i[0],l=n[u]||0,c="".concat(u," ").concat(l);n[u]=l+1;var d=a(c),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(s[d].references++,s[d].updater(p)):s.push({identifier:c,updater:v(p,t),references:1}),o.push(c)}return o}function l(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=n.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var s=i(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var c,d=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=d(t,r);else{var i=document.createTextNode(r),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function m(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var h=null,f=0;function v(e,t){var n,o,r;if(t.singleton){var i=f++;n=h||(h=l(t)),o=p.bind(null,n,i,!1),r=p.bind(null,n,i,!0)}else n=l(t),o=m.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=a(n[o]);s[r].references--}for(var i=u(e,t),l=0;l<n.length;l++){var c=a(n[l]);0===s[c].references&&(s[c].updater(),s.splice(c,1))}n=i}}}},function(e,t,n){(t=n(24)(!1)).push([e.i,"h1 {\r\n    color: #292727;\r\n    text-align: center;\r\n}",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(s=o,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(u," */")),i=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([r]).join("\n")}var s,a,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(r[s]=!0)}for(var a=0;a<e.length;a++){var u=[].concat(e[a]);o&&r[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t);var o=n(0),r=n.n(o),i=n(6),s=n.n(i),a=(n(21),function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)});function u(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var l=function(){return(l=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function c(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(n[o[r]]=e[o[r]])}return n}function d(e,t,n,o){var r,i=arguments.length,s=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(s=(i<3?r(s):i>3?r(t,n,s):r(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s}function p(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var o=Array(e),r=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,r++)o[r]=i[s];return o}var m=!1;var h=void 0;try{h=window}catch(e){}function f(e){if(!m&&void 0!==h){var t=e;return t&&t.ownerDocument&&t.ownerDocument.defaultView?t.ownerDocument.defaultView:h}}var v=function(){function e(e,t){this._timeoutIds=null,this._immediateIds=null,this._intervalIds=null,this._animationFrameIds=null,this._isDisposed=!1,this._parent=e||null,this._onErrorHandler=t,this._noop=function(){}}return e.prototype.dispose=function(){var e;if(this._isDisposed=!0,this._parent=null,this._timeoutIds){for(e in this._timeoutIds)this._timeoutIds.hasOwnProperty(e)&&this.clearTimeout(parseInt(e,10));this._timeoutIds=null}if(this._immediateIds){for(e in this._immediateIds)this._immediateIds.hasOwnProperty(e)&&this.clearImmediate(parseInt(e,10));this._immediateIds=null}if(this._intervalIds){for(e in this._intervalIds)this._intervalIds.hasOwnProperty(e)&&this.clearInterval(parseInt(e,10));this._intervalIds=null}if(this._animationFrameIds){for(e in this._animationFrameIds)this._animationFrameIds.hasOwnProperty(e)&&this.cancelAnimationFrame(parseInt(e,10));this._animationFrameIds=null}},e.prototype.setTimeout=function(e,t){var n=this,o=0;return this._isDisposed||(this._timeoutIds||(this._timeoutIds={}),o=setTimeout((function(){try{n._timeoutIds&&delete n._timeoutIds[o],e.apply(n._parent)}catch(e){n._onErrorHandler&&n._onErrorHandler(e)}}),t),this._timeoutIds[o]=!0),o},e.prototype.clearTimeout=function(e){this._timeoutIds&&this._timeoutIds[e]&&(clearTimeout(e),delete this._timeoutIds[e])},e.prototype.setImmediate=function(e,t){var n=this,o=0,r=f(t);if(!this._isDisposed){this._immediateIds||(this._immediateIds={});o=r.setTimeout((function(){try{n._immediateIds&&delete n._immediateIds[o],e.apply(n._parent)}catch(e){n._logError(e)}}),0),this._immediateIds[o]=!0}return o},e.prototype.clearImmediate=function(e,t){var n=f(t);this._immediateIds&&this._immediateIds[e]&&(n.clearTimeout(e),delete this._immediateIds[e])},e.prototype.setInterval=function(e,t){var n=this,o=0;return this._isDisposed||(this._intervalIds||(this._intervalIds={}),o=setInterval((function(){try{e.apply(n._parent)}catch(e){n._logError(e)}}),t),this._intervalIds[o]=!0),o},e.prototype.clearInterval=function(e){this._intervalIds&&this._intervalIds[e]&&(clearInterval(e),delete this._intervalIds[e])},e.prototype.throttle=function(e,t,n){var o=this;if(this._isDisposed)return this._noop;var r,i,s=t||0,a=!0,u=!0,l=0,c=null;n&&"boolean"==typeof n.leading&&(a=n.leading),n&&"boolean"==typeof n.trailing&&(u=n.trailing);var d=function(t){var n=Date.now(),p=n-l,m=a?s-p:s;return p>=s&&(!t||a)?(l=n,c&&(o.clearTimeout(c),c=null),r=e.apply(o._parent,i)):null===c&&u&&(c=o.setTimeout(d,m)),r};return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i=e,d(!0)}},e.prototype.debounce=function(e,t,n){var o=this;if(this._isDisposed){var r=function(){};return r.cancel=function(){},r.flush=function(){return null},r.pending=function(){return!1},r}var i,s,a=t||0,u=!1,l=!0,c=null,d=0,p=Date.now(),m=null;n&&"boolean"==typeof n.leading&&(u=n.leading),n&&"boolean"==typeof n.trailing&&(l=n.trailing),n&&"number"==typeof n.maxWait&&!isNaN(n.maxWait)&&(c=n.maxWait);var h=function(e){m&&(o.clearTimeout(m),m=null),p=e},f=function(t){h(t),i=e.apply(o._parent,s)},v=function(e){var t=Date.now(),n=!1;e&&(u&&t-d>=a&&(n=!0),d=t);var r=t-d,s=a-r,h=t-p,g=!1;return null!==c&&(h>=c&&m?g=!0:s=Math.min(s,c-h)),r>=a||g||n?f(t):null!==m&&e||!l||(m=o.setTimeout(v,s)),i},g=function(){return!!m},_=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s=e,v(!0)};return _.cancel=function(){g()&&h(Date.now())},_.flush=function(){return g()&&f(Date.now()),i},_.pending=g,_},e.prototype.requestAnimationFrame=function(e,t){var n=this,o=0,r=f(t);if(!this._isDisposed){this._animationFrameIds||(this._animationFrameIds={});var i=function(){try{n._animationFrameIds&&delete n._animationFrameIds[o],e.apply(n._parent)}catch(e){n._logError(e)}};o=r.requestAnimationFrame?r.requestAnimationFrame(i):r.setTimeout(i,0),this._animationFrameIds[o]=!0}return o},e.prototype.cancelAnimationFrame=function(e,t){var n=f(t);this._animationFrameIds&&this._animationFrameIds[e]&&(n.cancelAnimationFrame?n.cancelAnimationFrame(e):n.clearTimeout(e),delete this._animationFrameIds[e])},e.prototype._logError=function(e){this._onErrorHandler&&this._onErrorHandler(e)},e}();function g(e,t){for(var n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||t[n]!==e[n]))return!1;for(var n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}function _(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return y.apply(this,[null,e].concat(t))}function y(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];t=t||{};for(var r=0,i=n;r<i.length;r++){var s=i[r];if(s)for(var a in s)!s.hasOwnProperty(a)||e&&!e(a)||(t[a]=s[a])}return t}var b=function(){function e(t){this._id=e._uniqueId++,this._parent=t,this._eventRecords=[]}return e.raise=function(t,n,o,r){var i;if(e._isElement(t)){if("undefined"!=typeof document&&document.createEvent){var s=document.createEvent("HTMLEvents");s.initEvent(n,r||!1,!0),_(s,o),i=t.dispatchEvent(s)}else if("undefined"!=typeof document&&document.createEventObject){var a=document.createEventObject(o);t.fireEvent("on"+n,a)}}else for(;t&&!1!==i;){var u=t.__events__,l=u?u[n]:null;if(l)for(var c in l)if(l.hasOwnProperty(c))for(var d=l[c],p=0;!1!==i&&p<d.length;p++){var m=d[p];m.objectCallback&&(i=m.objectCallback.call(m.parent,o))}t=r?t.parent:null}return i},e.isObserved=function(e,t){var n=e&&e.__events__;return!!n&&!!n[t]},e.isDeclared=function(e,t){var n=e&&e.__declaredEvents;return!!n&&!!n[t]},e.stopPropagation=function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0},e._isElement=function(e){return!!e&&(!!e.addEventListener||"undefined"!=typeof HTMLElement&&e instanceof HTMLElement)},e.prototype.dispose=function(){this._isDisposed||(this._isDisposed=!0,this.off(),this._parent=null)},e.prototype.onAll=function(e,t,n){for(var o in t)t.hasOwnProperty(o)&&this.on(e,o,t[o],n)},e.prototype.on=function(t,n,o,r){var i=this;if(n.indexOf(",")>-1)for(var s=n.split(/[ ,]+/),a=0;a<s.length;a++)this.on(t,s[a],o,r);else{var u=this._parent,l={target:t,eventName:n,parent:u,callback:o,options:r};if((s=t.__events__=t.__events__||{})[n]=s[n]||{count:0},s[n][this._id]=s[n][this._id]||[],s[n][this._id].push(l),s[n].count++,e._isElement(t)){var c=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed){var n;try{if(!1===(n=o.apply(u,e))&&e[0]){var r=e[0];r.preventDefault&&r.preventDefault(),r.stopPropagation&&r.stopPropagation(),r.cancelBubble=!0}}catch(r){}return n}};l.elementCallback=c,t.addEventListener?t.addEventListener(n,c,r):t.attachEvent&&t.attachEvent("on"+n,c)}else{l.objectCallback=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed)return o.apply(u,e)}}this._eventRecords.push(l)}},e.prototype.off=function(e,t,n,o){for(var r=0;r<this._eventRecords.length;r++){var i=this._eventRecords[r];if(!(e&&e!==i.target||t&&t!==i.eventName||n&&n!==i.callback||"boolean"==typeof o&&o!==i.options)){var s=i.target.__events__,a=s[i.eventName],u=a?a[this._id]:null;u&&(1!==u.length&&n?(a.count--,u.splice(u.indexOf(i),1)):(a.count-=u.length,delete s[i.eventName][this._id]),a.count||delete s[i.eventName]),i.elementCallback&&(i.target.removeEventListener?i.target.removeEventListener(i.eventName,i.elementCallback,i.options):i.target.detachEvent&&i.target.detachEvent("on"+i.eventName,i.elementCallback)),this._eventRecords.splice(r--,1)}}},e.prototype.raise=function(t,n,o){return e.raise(this._parent,t,n,o)},e.prototype.declare=function(e){var t=this._parent.__declaredEvents=this._parent.__declaredEvents||{};if("string"==typeof e)t[e]=!0;else for(var n=0;n<e.length;n++)t[e[n]]=!0},e._uniqueId=0,e}();function C(e){console&&console.warn&&console.warn(e)}!function(e){function t(n,o){var r=e.call(this,n,o)||this;return function(e,t,n){for(var o=0,r=n.length;o<r;o++)E(e,t,n[o])}(r,t.prototype,["componentDidMount","shouldComponentUpdate","getSnapshotBeforeUpdate","render","componentDidUpdate","componentWillUnmount"]),r}u(t,e),t.prototype.componentDidUpdate=function(e,t){this._updateComponentRef(e,this.props)},t.prototype.componentDidMount=function(){this._setComponentRef(this.props.componentRef,this)},t.prototype.componentWillUnmount=function(){if(this._setComponentRef(this.props.componentRef,null),this.__disposables){for(var e=0,t=this._disposables.length;e<t;e++){var n=this.__disposables[e];n.dispose&&n.dispose()}this.__disposables=null}},Object.defineProperty(t.prototype,"className",{get:function(){if(!this.__className){var e=/function (.{1,})\(/.exec(this.constructor.toString());this.__className=e&&e.length>1?e[1]:""}return this.__className},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_disposables",{get:function(){return this.__disposables||(this.__disposables=[]),this.__disposables},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_async",{get:function(){return this.__async||(this.__async=new v(this),this._disposables.push(this.__async)),this.__async},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_events",{get:function(){return this.__events||(this.__events=new b(this),this._disposables.push(this.__events)),this.__events},enumerable:!0,configurable:!0}),t.prototype._resolveRef=function(e){var t=this;return this.__resolves||(this.__resolves={}),this.__resolves[e]||(this.__resolves[e]=function(n){return t[e]=n}),this.__resolves[e]},t.prototype._updateComponentRef=function(e,t){void 0===t&&(t={}),e&&t&&e.componentRef!==t.componentRef&&(this._setComponentRef(e.componentRef,null),this._setComponentRef(t.componentRef,this))},t.prototype._warnDeprecations=function(e){this.className,this.props},t.prototype._warnMutuallyExclusive=function(e){this.className,this.props},t.prototype._warnConditionallyRequiredProps=function(e,t,n){this.className,this.props},t.prototype._setComponentRef=function(e,t){!this._skipComponentRefResolution&&e&&("function"==typeof e&&e(t),"object"==typeof e&&(e.current=t))}}(o.Component);function E(e,t,n){var o=e[n],r=t[n];(o||r)&&(e[n]=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return r&&(e=r.apply(this,t)),o!==r&&(e=o.apply(this,t)),e})}function I(){return null}var k=0,x=function(){function e(){}return e.getValue=function(e,t){var n=M();return void 0===n[e]&&(n[e]="function"==typeof t?t():t),n[e]},e.setValue=function(e,t){var n=M(),o=n.__callbacks__,r=n[e];if(t!==r){n[e]=t;var i={oldValue:r,value:t,key:e};for(var s in o)o.hasOwnProperty(s)&&o[s](i)}return t},e.addChangeListener=function(e){var t=e.__id__,n=w();t||(t=e.__id__=String(k++)),n[t]=e},e.removeChangeListener=function(e){delete w()[e.__id__]},e}();function M(){var e,t=f()||{};return t.__globalSettings__||(t.__globalSettings__=((e={}).__callbacks__={},e)),t.__globalSettings__}function w(){return M().__callbacks__}var S={settings:{},scopedSettings:{},inCustomizerContext:!1},D=x.getValue("customizations",{settings:{},scopedSettings:{},inCustomizerContext:!1}),T=[],P=function(){function e(){}return e.reset=function(){D.settings={},D.scopedSettings={}},e.applySettings=function(t){D.settings=l(l({},D.settings),t),e._raiseChange()},e.applyScopedSettings=function(t,n){D.scopedSettings[t]=l(l({},D.scopedSettings[t]),n),e._raiseChange()},e.getSettings=function(e,t,n){void 0===n&&(n=S);for(var o={},r=t&&n.scopedSettings[t]||{},i=t&&D.scopedSettings[t]||{},s=0,a=e;s<a.length;s++){var u=a[s];o[u]=r[u]||n.settings[u]||i[u]||D.settings[u]}return o},e.applyBatchedUpdates=function(t,n){e._suppressUpdates=!0;try{t()}catch(e){}e._suppressUpdates=!1,n||e._raiseChange()},e.observe=function(e){T.push(e)},e.unobserve=function(e){T=T.filter((function(t){return t!==e}))},e._raiseChange=function(){e._suppressUpdates||T.forEach((function(e){return e()}))},e}();function B(e,t){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var F=o.createContext({customizations:{inCustomizerContext:!1,settings:{},scopedSettings:{}}});function N(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(e&&1===e.length&&e[0]&&!e[0].subComponentStyles)return e[0];for(var n={},o={},r=0,i=e;r<i.length;r++){var s=i[r];if(s)for(var a in s)if(s.hasOwnProperty(a)){if("subComponentStyles"===a&&void 0!==s.subComponentStyles){var u=s.subComponentStyles;for(var l in u)u.hasOwnProperty(l)&&(o.hasOwnProperty(l)?o[l].push(u[l]):o[l]=[u[l]]);continue}var c=n[a],d=s[a];n[a]=void 0===c?d:p(Array.isArray(c)?c:[c],Array.isArray(d)?d:[d])}}if(Object.keys(o).length>0){n.subComponentStyles={};var m=n.subComponentStyles,h=function(e){if(o.hasOwnProperty(e)){var t=o[e];m[e]=function(e){return N.apply(void 0,t.map((function(t){return"function"==typeof t?t(e):t})))}}};for(var l in o)h(l)}return n}function R(e,t,n){return function(r){var i,s=((i=function(i){function s(e){var t=i.call(this,e)||this;return t._styleCache={},t._onSettingChanged=t._onSettingChanged.bind(t),t}return u(s,i),s.prototype.componentDidMount=function(){P.observe(this._onSettingChanged)},s.prototype.componentWillUnmount=function(){P.unobserve(this._onSettingChanged)},s.prototype.render=function(){var i=this;return o.createElement(F.Consumer,null,(function(s){var a=P.getSettings(t,e,s.customizations),u=i.props;if(a.styles&&"function"==typeof a.styles&&(a.styles=a.styles(l(l({},a),u))),n&&a.styles){if(i._styleCache.default!==a.styles||i._styleCache.component!==u.styles){var c=N(a.styles,u.styles);i._styleCache.default=a.styles,i._styleCache.component=u.styles,i._styleCache.merged=c}return o.createElement(r,l({},a,u,{styles:i._styleCache.merged}))}return o.createElement(r,l({},a,u))}))},s.prototype._onSettingChanged=function(){this.forceUpdate()},s}(o.Component)).displayName="Customized"+e,i);return B(r,s)}}var A,O=0,L=1,H=2,W="undefined"!=typeof navigator&&/rv:11.0/.test(navigator.userAgent),K={};try{K=window}catch(ro){}var U=function(){function e(e){this._rules=[],this._preservedRules=[],this._rulesToInsert=[],this._counter=0,this._keyToClassName={},this._onResetCallbacks=[],this._classNameToArgs={},this._config=l({injectionMode:L,defaultPrefix:"css",namespace:void 0,cspSettings:void 0},e),this._keyToClassName=this._config.classNameCache||{}}return e.getInstance=function(){var t;if(!(A=K.__stylesheet__)||A._lastStyleElement&&A._lastStyleElement.ownerDocument!==document){var n=(null===(t=K)||void 0===t?void 0:t.FabricConfig)||{};A=K.__stylesheet__=new e(n.mergeStyles)}return A},e.prototype.setConfig=function(e){this._config=l(l({},this._config),e)},e.prototype.onReset=function(e){this._onResetCallbacks.push(e)},e.prototype.getClassName=function(e){var t=this._config.namespace;return(t?t+"-":"")+(e||this._config.defaultPrefix)+"-"+this._counter++},e.prototype.cacheClassName=function(e,t,n,o){this._keyToClassName[t]=e,this._classNameToArgs[e]={args:n,rules:o}},e.prototype.classNameFromKey=function(e){return this._keyToClassName[e]},e.prototype.getClassNameCache=function(){return this._keyToClassName},e.prototype.argsFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.args},e.prototype.insertedRulesFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.rules},e.prototype.insertRule=function(e,t){var n=this._config.injectionMode!==O?this._getStyleElement():void 0;if(t&&this._preservedRules.push(e),n)switch(this._config.injectionMode){case L:var o=n.sheet;try{o.insertRule(e,o.cssRules.length)}catch(e){}break;case H:n.appendChild(document.createTextNode(e))}else this._rules.push(e);this._config.onInsertRule&&this._config.onInsertRule(e)},e.prototype.getRules=function(e){return(e?this._preservedRules.join(""):"")+this._rules.join("")+this._rulesToInsert.join("")},e.prototype.reset=function(){this._rules=[],this._rulesToInsert=[],this._counter=0,this._classNameToArgs={},this._keyToClassName={},this._onResetCallbacks.forEach((function(e){return e()}))},e.prototype.resetKeys=function(){this._keyToClassName={}},e.prototype._getStyleElement=function(){var e=this;return this._styleElement||"undefined"==typeof document||(this._styleElement=this._createStyleElement(),W||window.requestAnimationFrame((function(){e._styleElement=void 0}))),this._styleElement},e.prototype._createStyleElement=function(){var e=document.head,t=document.createElement("style");t.setAttribute("data-merge-styles","true");var n=this._config.cspSettings;if(n&&n.nonce&&t.setAttribute("nonce",n.nonce),this._lastStyleElement)e.insertBefore(t,this._lastStyleElement.nextElementSibling);else{var o=this._findPlaceholderStyleTag();o?e.insertBefore(t,o.nextElementSibling):e.insertBefore(t,e.childNodes[0])}return this._lastStyleElement=t,t},e.prototype._findPlaceholderStyleTag=function(){var e=document.head;return e?e.querySelector("style[data-merge-styles]"):null},e}(),j=!1,z=0,q={empty:!0},V={},G="undefined"==typeof WeakMap?null:WeakMap;function Z(){z++}function Y(e,t,n){if(void 0===t&&(t=100),void 0===n&&(n=!1),!G)return e;if(!j){var o=U.getInstance();o&&o.onReset&&U.getInstance().onReset(Z),j=!0}var r,i=0,s=z;return function(){for(var o=[],a=0;a<arguments.length;a++)o[a]=arguments[a];var u=r;(void 0===r||s!==z||t>0&&i>t)&&(r=Q(),i=0,s=z),u=r;for(var l=0;l<o.length;l++){var c=X(o[l]);u.map.has(c)||u.map.set(c,Q()),u=u.map.get(c)}return u.hasOwnProperty("value")||(u.value=e.apply(void 0,o),i++),!n||null!==u.value&&void 0!==u.value||(u.value=e.apply(void 0,o)),u.value}}function X(e){return e?"object"==typeof e||"function"==typeof e?e:(V[e]||(V[e]={val:e}),V[e]):q}function Q(){return{map:G?new G:null}}function $(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=[],o=0,r=e;o<r.length;o++){var i=r[o];if(i)if("string"==typeof i)n.push(i);else if(i.hasOwnProperty("toString")&&"function"==typeof i.toString)n.push(i.toString());else for(var s in i)i[s]&&n.push(s)}return n.join(" ")}function J(e,t){return void 0===t&&(t=!0),e&&(t&&function(e){var t,n;return e&&((n=e)&&n._virtual)&&(t=e._virtual.parent),t}(e)||e.parentNode&&e.parentNode)}function ee(e,t){return e&&e!==document.body?t(e)?e:ee(J(e),t):null}function te(e,t){var n=ee(e,(function(e){return t===e||e.hasAttribute("data-portal-element")}));return null!==n&&n.hasAttribute("data-portal-element")}var ne=9,oe=13,re=18,ie=27,se=32,ae=33,ue=34,le=35,ce=36,de=37,pe=38,me=39,he=40;function fe(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.length<2?t[0]:function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];t.forEach((function(t){return t&&t.apply(e,n)}))}}function ve(e){!function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=fe(e,e[n],t[n]))}(e,{componentDidMount:ge,componentDidUpdate:_e,componentWillUnmount:ye})}function ge(){be(this.props.componentRef,this)}function _e(e){e.componentRef!==this.props.componentRef&&(be(e.componentRef,null),be(this.props.componentRef,this))}function ye(){be(this.props.componentRef,null)}function be(e,t){e&&("object"==typeof e?e.current=t:"function"==typeof e&&e(t))}var Ce=f()||{};void 0===Ce.__currentId__&&(Ce.__currentId__=0);var Ee=!1;function Ie(e){if(!Ee){var t=U.getInstance();t&&t.onReset&&t.onReset(ke),Ee=!0}return(void 0===e?"id__":e)+Ce.__currentId__++}function ke(e){void 0===e&&(e=0),Ce.__currentId__=e}var xe,Me=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},o=0,r=e;o<r.length;o++)for(var i=r[o],s=Array.isArray(i)?i:Object.keys(i),a=0,u=s;a<u.length;a++){var l=u[a];n[l]=1}return n},we=Me(["onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onInput","onSubmit","onLoad","onError","onKeyDown","onKeyDownCapture","onKeyPress","onKeyUp","onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting","onClick","onClickCapture","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onMouseUpCapture","onSelect","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","onScroll","onWheel","onPointerCancel","onPointerDown","onPointerEnter","onPointerLeave","onPointerMove","onPointerOut","onPointerOver","onPointerUp","onGotPointerCapture","onLostPointerCapture"]),Se=Me(["accessKey","children","className","contentEditable","dir","draggable","hidden","htmlFor","id","lang","ref","role","style","tabIndex","title","translate","spellCheck","name"]),De=Me(Se,we),Te=(Me(De,["form"]),Me(De,["height","loop","muted","preload","src","width"])),Pe=(Me(Te,["poster"]),Me(De,["start"]),Me(De,["value"]),Me(De,["download","href","hrefLang","media","rel","target","type"])),Be=Me(De,["autoFocus","disabled","form","formAction","formEncType","formMethod","formNoValidate","formTarget","type","value"]),Fe=(Me(Be,["accept","alt","autoCapitalize","autoComplete","checked","dirname","form","height","inputMode","list","max","maxLength","min","multiple","pattern","placeholder","readOnly","required","src","step","size","type","value","width"]),Me(Be,["autoCapitalize","cols","dirname","form","maxLength","placeholder","readOnly","required","rows","wrap"]),Me(Be,["form","multiple","required"]),Me(De,["selected","value"]),Me(De,["cellPadding","cellSpacing"]),Me(De,["rowSpan","scope"]),Me(De,["colSpan","headers","rowSpan","scope"]),Me(De,["span"]),Me(De,["span"]),Me(De,["acceptCharset","action","encType","encType","method","noValidate","target"]),Me(De,["allow","allowFullScreen","allowPaymentRequest","allowTransparency","csp","height","importance","referrerPolicy","sandbox","src","srcDoc","width"]),Me(De,["alt","crossOrigin","height","src","srcSet","useMap","width"])),Ne=De;function Re(e,t,n){for(var o,r=Array.isArray(t),i={},s=0,a=Object.keys(e);s<a.length;s++){var u=a[s];!(!r&&t[u]||r&&t.indexOf(u)>=0||0===u.indexOf("data-")||0===u.indexOf("aria-"))||n&&-1!==(null===(o=n)||void 0===o?void 0:o.indexOf(u))||(i[u]=e[u])}return i}var Ae=((xe={})[pe]=1,xe[he]=1,xe[de]=1,xe[me]=1,xe[ce]=1,xe[le]=1,xe[ne]=1,xe[ae]=1,xe[ue]=1,xe);var Oe="ms-Fabric--isFocusVisible";function Le(e,t){var n=t?f(t):f();if(n){var o=n.document.body.classList;o.add(e?Oe:"ms-Fabric--isFocusHidden"),o.remove(e?"ms-Fabric--isFocusHidden":Oe)}}var He=new WeakMap;function We(e,t){var n,o=He.get(e);return n=o?o+t:1,He.set(e,n),n}var Ke=function(e){var t;return t=e.rootRef,o.useEffect((function(){var e,n,o=f(null===(e=t)||void 0===e?void 0:e.current);if(o&&!0!==(null===(n=o.FabricConfig)||void 0===n?void 0:n.disableFocusRects)){var r=We(o,1);return r<=1&&(o.addEventListener("mousedown",Ue,!0),o.addEventListener("pointerdown",je,!0),o.addEventListener("keydown",ze,!0)),function(){var e;o&&!0!==(null===(e=o.FabricConfig)||void 0===e?void 0:e.disableFocusRects)&&0===(r=We(o,-1))&&(o.removeEventListener("mousedown",Ue,!0),o.removeEventListener("pointerdown",je,!0),o.removeEventListener("keydown",ze,!0))}}}),[t]),null};function Ue(e){Le(!1,e.target)}function je(e){"mouse"!==e.pointerType&&Le(!1,e.target)}function ze(e){var t;t=e.which,Ae[t]&&Le(!0,e.target)}function qe(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.filter((function(e){return e})).join(" ").trim();return""===n?void 0:n}function Ve(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var Ge=function(e){return function(t){for(var n=0,o=e.refs;n<o.length;n++){var r=o[n];"function"==typeof r?r(t):r&&(r.current=t)}}},Ze=function(e){var t={refs:[]};return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.resolver&&Ve(t.refs,e)||(t.resolver=Ge(t)),t.refs=e,t.resolver}};function Ye(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var o=[],r=0,i=t;r<i.length;r++){var s=i[r];s&&o.push("function"==typeof s?s(e):s)}return 1===o.length?o[0]:o.length?N.apply(void 0,o):{}}function Xe(e,t){var n,r=(n=o.useState(0)[1],function(){return n((function(e){return++e}))}),i=o.useContext(F).customizations,s=i.inCustomizerContext;return o.useEffect((function(){return s||P.observe(r),function(){s||P.unobserve(r)}}),[s]),P.getSettings(e,t,i)}var Qe,$e,Je=["theme","styles"];function et(e,t,n,r,i){var s=(r=r||{scope:"",fields:void 0}).scope,a=r.fields,u=void 0===a?Je:a,d=o.forwardRef((function(r,i){var a=o.useRef(),d=Xe(u,s),p=d.styles,m=(d.dir,c(d,["styles","dir"])),h=n?n(r):void 0,f=a.current&&a.current.__cachedInputs__||[];if(!a.current||p!==f[1]||r.styles!==f[2]){var v=function(e){return Ye(e,t,p,r.styles)};v.__cachedInputs__=[t,p,r.styles],v.__noStyleOverride__=!p&&!r.styles,a.current=v}return o.createElement(e,l({ref:i},m,h,r,{styles:a.current}))}));d.displayName="Styled"+(e.displayName||e.name);var p=i?o.memo(d):d;return d.displayName&&(p.displayName=d.displayName),p}function tt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[],o=[],r=U.getInstance();function i(e){for(var t=0,s=e;t<s.length;t++){var a=s[t];if(a)if("string"==typeof a)if(a.indexOf(" ")>=0)i(a.split(" "));else{var u=r.argsFromClassName(a);u?i(u):-1===n.indexOf(a)&&n.push(a)}else Array.isArray(a)?i(a):"object"==typeof a&&o.push(a)}}return i(e),{classes:n,objects:o}}function nt(e){$e!==e&&($e=e)}function ot(){return void 0===$e&&($e="undefined"!=typeof document&&!!document.documentElement&&"rtl"===document.documentElement.getAttribute("dir")),$e}function rt(){return{rtl:ot()}}!function(e){e[e.default=0]="default",e[e.image=1]="image",e[e.Default=1e5]="Default",e[e.Image=100001]="Image"}(Qe||(Qe={})),$e=ot();var it,st={};var at={"user-select":1};function ut(e,t){var n=function(){if(!it){var e="undefined"!=typeof document?document:void 0,t="undefined"!=typeof navigator?navigator:void 0,n=t?t.userAgent.toLowerCase():void 0;it=e?{isWebkit:!!(e&&"WebkitAppearance"in e.documentElement.style),isMoz:!!(n&&n.indexOf("firefox")>-1),isOpera:!!(n&&n.indexOf("opera")>-1),isMs:!(!t||!/rv:11.0/i.test(t.userAgent)&&!/Edge\/\d./i.test(navigator.userAgent))}:{isWebkit:!0,isMoz:!0,isOpera:!0,isMs:!0}}return it}(),o=e[t];if(at[o]){var r=e[t+1];at[o]&&(n.isWebkit&&e.push("-webkit-"+o,r),n.isMoz&&e.push("-moz-"+o,r),n.isMs&&e.push("-ms-"+o,r),n.isOpera&&e.push("-o-"+o,r))}}var lt,ct=["column-count","font-weight","flex","flex-grow","flex-shrink","fill-opacity","opacity","order","z-index","zoom"];function dt(e,t){var n=e[t],o=e[t+1];if("number"==typeof o){var r=ct.indexOf(n)>-1,i=n.indexOf("--")>-1,s=r||i?"":"px";e[t+1]=""+o+s}}var pt="left",mt="right",ht=((lt={}).left=mt,lt.right=pt,lt),ft={"w-resize":"e-resize","sw-resize":"se-resize","nw-resize":"ne-resize"};function vt(e,t,n){if(e.rtl){var o=t[n];if(!o)return;var r=t[n+1];if("string"==typeof r&&r.indexOf("@noflip")>=0)t[n+1]=r.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g,"");else if(o.indexOf(pt)>=0)t[n]=o.replace(pt,mt);else if(o.indexOf(mt)>=0)t[n]=o.replace(mt,pt);else if(String(r).indexOf(pt)>=0)t[n+1]=r.replace(pt,mt);else if(String(r).indexOf(mt)>=0)t[n+1]=r.replace(mt,pt);else if(ht[o])t[n]=ht[o];else if(ft[r])t[n+1]=ft[r];else switch(o){case"margin":case"padding":t[n+1]=function(e){if("string"==typeof e){var t=e.split(" ");if(4===t.length)return t[0]+" "+t[3]+" "+t[2]+" "+t[1]}return e}(r);break;case"box-shadow":t[n+1]=function(e,t){var n=e.split(" "),o=parseInt(n[t],10);return n[0]=n[0].replace(String(o),String(-1*o)),n.join(" ")}(r,0)}}}function gt(e){var t=e&&e["&"];return t?t.displayName:void 0}var _t=/\:global\((.+?)\)/g;function yt(e,t){return e.indexOf(":global(")>=0?e.replace(_t,"$1"):0===e.indexOf(":")?t+e:e.indexOf("&")<0?t+" "+e:e}function bt(e,t,n,o){void 0===t&&(t={__order:[]}),0===n.indexOf("@")?Ct([o],t,n=n+"{"+e):n.indexOf(",")>-1?function(e){if(!_t.test(e))return e;for(var t=[],n=/\:global\((.+?)\)/g,o=null;o=n.exec(e);)o[1].indexOf(",")>-1&&t.push([o.index,o.index+o[0].length,o[1].split(",").map((function(e){return":global("+e.trim()+")"})).join(", ")]);return t.reverse().reduce((function(e,t){var n=t[0],o=t[1],r=t[2];return e.slice(0,n)+r+e.slice(o)}),e)}(n).split(",").map((function(e){return e.trim()})).forEach((function(n){return Ct([o],t,yt(n,e))})):Ct([o],t,yt(n,e))}function Ct(e,t,n){void 0===t&&(t={__order:[]}),void 0===n&&(n="&");var o=U.getInstance(),r=t[n];r||(r={},t[n]=r,t.__order.push(n));for(var i=0,s=e;i<s.length;i++){var a=s[i];if("string"==typeof a){var u=o.argsFromClassName(a);u&&Ct(u,t,n)}else if(Array.isArray(a))Ct(a,t,n);else for(var l in a)if(a.hasOwnProperty(l)){var c=a[l];if("selectors"===l){var d=a.selectors;for(var p in d)d.hasOwnProperty(p)&&bt(n,t,p,d[p])}else"object"==typeof c?null!==c&&bt(n,t,l,c):void 0!==c&&("margin"===l||"padding"===l?Et(r,l,c):r[l]=c)}}return t}function Et(e,t,n){var o="string"==typeof n?n.split(" "):[n];e[t+"Top"]=o[0],e[t+"Right"]=o[1]||o[0],e[t+"Bottom"]=o[2]||o[0],e[t+"Left"]=o[3]||o[1]||o[0]}function It(e,t){for(var n=[e.rtl?"rtl":"ltr"],o=!1,r=0,i=t.__order;r<i.length;r++){var s=i[r];n.push(s);var a=t[s];for(var u in a)a.hasOwnProperty(u)&&void 0!==a[u]&&(o=!0,n.push(u,a[u]))}return o?n.join(""):void 0}function kt(e,t){return t<=0?"":1===t?e:e+kt(e,t-1)}function xt(e,t){if(!t)return"";var n,o,r,i=[];for(var s in t)t.hasOwnProperty(s)&&"displayName"!==s&&void 0!==t[s]&&i.push(s,t[s]);for(var a=0;a<i.length;a+=2)r=void 0,"-"!==(r=(n=i)[o=a]).charAt(0)&&(n[o]=st[r]=st[r]||r.replace(/([A-Z])/g,"-$1").toLowerCase()),dt(i,a),vt(e,i,a),ut(i,a);for(a=1;a<i.length;a+=4)i.splice(a,1,":",i[a],";");return i.join("")}function Mt(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=Ct(t),r=It(e,o);if(r){var i=U.getInstance(),s={className:i.classNameFromKey(r),key:r,args:t};if(!s.className){s.className=i.getClassName(gt(o));for(var a=[],u=0,l=o.__order;u<l.length;u++){var c=l[u];a.push(c,xt(e,o[c]))}s.rulesToInsert=a}return s}}function wt(e,t){void 0===t&&(t=1);var n=U.getInstance(),o=e.className,r=e.key,i=e.args,s=e.rulesToInsert;if(s){for(var a=0;a<s.length;a+=2){var u=s[a+1];if(u){var l=s[a],c=(l=l.replace(/&/g,kt("."+e.className,t)))+"{"+u+"}"+(0===l.indexOf("@")?"}":"");n.insertRule(c)}}n.cacheClassName(o,r,i,s)}}function St(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Dt(e,rt())}function Dt(e,t){var n,o,r={subComponentStyles:{}};if(!e[0]&&e.length<=1)return{subComponentStyles:{}};var i=N.apply(void 0,e),s=[];for(var a in i)if(i.hasOwnProperty(a)){if("subComponentStyles"===a){r.subComponentStyles=i.subComponentStyles||{};continue}var u=tt(i[a]),l=u.classes,c=u.objects;if(null===(n=c)||void 0===n?void 0:n.length)(m=Mt(t||{},{displayName:a},c))&&(s.push(m),r[a]=l.concat([m.className]).join(" "));else r[a]=l.join(" ")}for(var d=0,p=s;d<p.length;d++){var m;(m=p[d])&&wt(m,null===(o=t)||void 0===o?void 0:o.specificityMultiplier)}return r}function Tt(e){if(!m&&"undefined"!=typeof document){var t=e;return t&&t.ownerDocument?t.ownerDocument:document}}function Pt(e){var t=null;try{var n=f();t=n?n.sessionStorage.getItem(e):null}catch(e){}return t}function Bt(e,t){var n;try{null===(n=f())||void 0===n||n.sessionStorage.setItem(e,t)}catch(e){}}var Ft;function Nt(e){if(void 0===e&&(e={}),void 0!==e.rtl)return e.rtl;if(void 0===Ft){var t=Pt("isRTL");null!==t&&function(e,t){void 0===t&&(t=!1);var n=Tt();n&&n.documentElement.setAttribute("dir",e?"rtl":"ltr");t&&Bt("isRTL",e?"1":"0");nt(Ft=e)}(Ft="1"===t);var n=Tt();void 0===Ft&&n&&nt(Ft="rtl"===(n.body&&n.body.getAttribute("dir")||n.documentElement.getAttribute("dir")))}return!!Ft}var Rt=0,At=U.getInstance();At&&At.onReset&&At.onReset((function(){return Rt++}));var Ot,Lt,Ht;function Wt(e){void 0===e&&(e={});var t=new Map,n=0,o=0,r=Rt;return function(i,s){var a,u;if(void 0===s&&(s={}),e.useStaticStyles&&"function"==typeof i&&i.__noStyleOverride__)return i(s);o++;var l=t,c=s.theme,d=c&&void 0!==c.rtl?c.rtl:Nt(),p=e.disableCaching;(r!==Rt&&(r=Rt,t=new Map,n=0),e.disableCaching||(l=Ut(t,i),l=Ut(l,s)),!p&&l.__retval__||(l.__retval__=void 0===i?{}:Dt(["function"==typeof i?i(s):i],{rtl:!!d,specificityMultiplier:e.useStaticStyles?5:void 0}),p||n++),n>(e.cacheSize||50))&&((null===(u=null===(a=f())||void 0===a?void 0:a.FabricConfig)||void 0===u?void 0:u.enableClassNameCacheFullWarning)&&(console.warn("Styles are being recalculated too frequently. Cache miss rate is "+n+"/"+o+"."),console.trace()),t.clear(),n=0,e.disableCaching=!0);return l.__retval__}}function Kt(e,t){return t=function(e){switch(e){case void 0:return"__undefined__";case null:return"__null__";default:return e}}(t),e.has(t)||e.set(t,new Map),e.get(t)}function Ut(e,t){if("function"==typeof t)if(t.__cachedInputs__)for(var n=0,o=t.__cachedInputs__;n<o.length;n++){e=Kt(e,o[n])}else e=Kt(e,t);else if("object"==typeof t)for(var r in t)t.hasOwnProperty(r)&&(e=Kt(e,t[r]));return e}!function(e){e[e.center=0]="center",e[e.contain=1]="contain",e[e.cover=2]="cover",e[e.none=3]="none",e[e.centerCover=4]="centerCover",e[e.centerContain=5]="centerContain"}(Ot||(Ot={})),function(e){e[e.landscape=0]="landscape",e[e.portrait=1]="portrait"}(Lt||(Lt={})),function(e){e[e.notLoaded=0]="notLoaded",e[e.loaded=1]="loaded",e[e.error=2]="error",e[e.errorLoaded=3]="errorLoaded"}(Ht||(Ht={}));var jt=Wt(),zt=function(e){function t(t){var n=e.call(this,t)||this;return n._coverStyle=Lt.portrait,n._imageElement=o.createRef(),n._frameElement=o.createRef(),n._onImageLoaded=function(e){var t=n.props,o=t.src,r=t.onLoad;r&&r(e),n._computeCoverStyle(n.props),o&&n.setState({loadState:Ht.loaded})},n._onImageError=function(e){n.props.onError&&n.props.onError(e),n.setState({loadState:Ht.error})},n.state={loadState:Ht.notLoaded},n}return u(t,e),t.prototype.UNSAFE_componentWillReceiveProps=function(e){e.src!==this.props.src?this.setState({loadState:Ht.notLoaded}):this.state.loadState===Ht.loaded&&this._computeCoverStyle(e)},t.prototype.componentDidUpdate=function(e,t){this._checkImageLoaded(),this.props.onLoadingStateChange&&t.loadState!==this.state.loadState&&this.props.onLoadingStateChange(this.state.loadState)},t.prototype.render=function(){var e=Re(this.props,Fe,["width","height"]),t=this.props,n=t.src,r=t.alt,i=t.width,s=t.height,a=t.shouldFadeIn,u=t.shouldStartVisible,c=t.className,d=t.imageFit,p=t.role,m=t.maximizeFrame,h=t.styles,f=t.theme,v=this.state.loadState,g=void 0!==this.props.coverStyle?this.props.coverStyle:this._coverStyle,_=jt(h,{theme:f,className:c,width:i,height:s,maximizeFrame:m,shouldFadeIn:a,shouldStartVisible:u,isLoaded:v===Ht.loaded||v===Ht.notLoaded&&this.props.shouldStartVisible,isLandscape:g===Lt.landscape,isCenter:d===Ot.center,isCenterContain:d===Ot.centerContain,isCenterCover:d===Ot.centerCover,isContain:d===Ot.contain,isCover:d===Ot.cover,isNone:d===Ot.none,isError:v===Ht.error,isNotImageFit:void 0===d});return o.createElement("div",{className:_.root,style:{width:i,height:s},ref:this._frameElement},o.createElement("img",l({},e,{onLoad:this._onImageLoaded,onError:this._onImageError,key:"fabricImage"+this.props.src||"",className:_.image,ref:this._imageElement,src:n,alt:r,role:p})))},t.prototype._checkImageLoaded=function(){var e=this.props.src;this.state.loadState===Ht.notLoaded&&(!!this._imageElement.current&&(e&&this._imageElement.current.naturalWidth>0&&this._imageElement.current.naturalHeight>0||this._imageElement.current.complete&&t._svgRegex.test(e))&&(this._computeCoverStyle(this.props),this.setState({loadState:Ht.loaded})))},t.prototype._computeCoverStyle=function(e){var t=e.imageFit,n=e.width,o=e.height;if((t===Ot.cover||t===Ot.contain||t===Ot.centerContain||t===Ot.centerCover)&&void 0===this.props.coverStyle&&this._imageElement.current&&this._frameElement.current){var r=void 0;r="number"==typeof n&&"number"==typeof o&&t!==Ot.centerContain&&t!==Ot.centerCover?n/o:this._frameElement.current.clientWidth/this._frameElement.current.clientHeight;var i=this._imageElement.current.naturalWidth/this._imageElement.current.naturalHeight;this._coverStyle=i>r?Lt.landscape:Lt.portrait}},t.defaultProps={shouldFadeIn:!0},t._svgRegex=/\.svg$/i,t}(o.Component);function qt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Vt(e,rt())}function Vt(e,t){var n=tt(e instanceof Array?e:[e]),o=n.classes,r=n.objects;return r.length&&o.push(function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=Mt.apply(void 0,p([e],t));return o?(wt(o,e.specificityMultiplier),o.className):""}(t||{},r)),o.join(" ")}function Gt(e){var t=U.getInstance(),n=t.getClassName(),o=[];for(var r in e)e.hasOwnProperty(r)&&o.push(r,"{",xt(rt(),e[r]),"}");var i=o.join("");return t.insertRule("@keyframes "+n+"{"+i+"}",!0),t.cacheClassName(n,i,[],["keyframes",i]),n}var Zt="cubic-bezier(.1,.9,.2,1)",Yt="cubic-bezier(.1,.25,.75,.9)",Xt=Gt({from:{opacity:0},to:{opacity:1}}),Qt=Gt({from:{opacity:1},to:{opacity:0,visibility:"hidden"}}),$t=Tn(-10),Jt=Tn(-20),en=Tn(-40),tn=Tn(-400),nn=Tn(10),on=Tn(20),rn=Tn(40),sn=Tn(400),an=Pn(10),un=Pn(20),ln=Pn(-10),cn=Pn(-20),dn=Bn(10),pn=Bn(20),mn=Bn(40),hn=Bn(400),fn=Bn(-10),vn=Bn(-20),gn=Bn(-40),_n=Bn(-400),yn=Fn(-10),bn=Fn(-20),Cn=Fn(10),En=Fn(20),In=Gt({from:{transform:"scale3d(.98,.98,1)"},to:{transform:"scale3d(1,1,1)"}}),kn=Gt({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(.98,.98,1)"}}),xn=Gt({from:{transform:"scale3d(1.03,1.03,1)"},to:{transform:"scale3d(1,1,1)"}}),Mn=Gt({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(1.03,1.03,1)"}}),wn=Gt({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(90deg)"}}),Sn=Gt({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(-90deg)"}});function Dn(e,t,n){return{animationName:e,animationDuration:t,animationTimingFunction:n,animationFillMode:"both"}}function Tn(e){return Gt({from:{transform:"translate3d("+e+"px,0,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function Pn(e){return Gt({from:{transform:"translate3d(0,"+e+"px,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function Bn(e){return Gt({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d("+e+"px,0,0)"}})}function Fn(e){return Gt({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d(0,"+e+"px,0)"}})}var Nn,Rn,An,On,Ln,Hn=function(e){var t={},n=function(n){var o;e.hasOwnProperty(n)&&Object.defineProperty(t,n,{get:function(){return void 0===o&&(o=qt(e[n]).toString()),o},enumerable:!0,configurable:!0})};for(var o in e)n(o);return t}({slideRightIn10:Dn(Xt+","+$t,"0.367s",Zt),slideRightIn20:Dn(Xt+","+Jt,"0.367s",Zt),slideRightIn40:Dn(Xt+","+en,"0.367s",Zt),slideRightIn400:Dn(Xt+","+tn,"0.367s",Zt),slideLeftIn10:Dn(Xt+","+nn,"0.367s",Zt),slideLeftIn20:Dn(Xt+","+on,"0.367s",Zt),slideLeftIn40:Dn(Xt+","+rn,"0.367s",Zt),slideLeftIn400:Dn(Xt+","+sn,"0.367s",Zt),slideUpIn10:Dn(Xt+","+an,"0.367s",Zt),slideUpIn20:Dn(Xt+","+un,"0.367s",Zt),slideDownIn10:Dn(Xt+","+ln,"0.367s",Zt),slideDownIn20:Dn(Xt+","+cn,"0.367s",Zt),slideRightOut10:Dn(Qt+","+dn,"0.367s",Zt),slideRightOut20:Dn(Qt+","+pn,"0.367s",Zt),slideRightOut40:Dn(Qt+","+mn,"0.367s",Zt),slideRightOut400:Dn(Qt+","+hn,"0.367s",Zt),slideLeftOut10:Dn(Qt+","+fn,"0.367s",Zt),slideLeftOut20:Dn(Qt+","+vn,"0.367s",Zt),slideLeftOut40:Dn(Qt+","+gn,"0.367s",Zt),slideLeftOut400:Dn(Qt+","+_n,"0.367s",Zt),slideUpOut10:Dn(Qt+","+yn,"0.367s",Zt),slideUpOut20:Dn(Qt+","+bn,"0.367s",Zt),slideDownOut10:Dn(Qt+","+Cn,"0.367s",Zt),slideDownOut20:Dn(Qt+","+En,"0.367s",Zt),scaleUpIn100:Dn(Xt+","+In,"0.367s",Zt),scaleDownIn100:Dn(Xt+","+xn,"0.367s",Zt),scaleUpOut103:Dn(Qt+","+Mn,"0.167s",Yt),scaleDownOut98:Dn(Qt+","+kn,"0.167s",Yt),fadeIn100:Dn(Xt,"0.167s",Yt),fadeIn200:Dn(Xt,"0.267s",Yt),fadeIn400:Dn(Xt,"0.367s",Yt),fadeIn500:Dn(Xt,"0.467s",Yt),fadeOut100:Dn(Qt,"0.167s",Yt),fadeOut200:Dn(Qt,"0.267s",Yt),fadeOut400:Dn(Qt,"0.367s",Yt),fadeOut500:Dn(Qt,"0.467s",Yt),rotate90deg:Dn(wn,"0.1s",Yt),rotateN90deg:Dn(Sn,"0.1s",Yt)});!function(e){e.Arabic="Segoe UI Web (Arabic)",e.Cyrillic="Segoe UI Web (Cyrillic)",e.EastEuropean="Segoe UI Web (East European)",e.Greek="Segoe UI Web (Greek)",e.Hebrew="Segoe UI Web (Hebrew)",e.Thai="Leelawadee UI Web",e.Vietnamese="Segoe UI Web (Vietnamese)",e.WestEuropean="Segoe UI Web (West European)",e.Selawik="Selawik Web",e.Armenian="Segoe UI Web (Armenian)",e.Georgian="Segoe UI Web (Georgian)"}(Nn||(Nn={})),function(e){e.Arabic="'"+Nn.Arabic+"'",e.ChineseSimplified="'Microsoft Yahei UI', Verdana, Simsun",e.ChineseTraditional="'Microsoft Jhenghei UI', Pmingliu",e.Cyrillic="'"+Nn.Cyrillic+"'",e.EastEuropean="'"+Nn.EastEuropean+"'",e.Greek="'"+Nn.Greek+"'",e.Hebrew="'"+Nn.Hebrew+"'",e.Hindi="'Nirmala UI'",e.Japanese="'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka",e.Korean="'Malgun Gothic', Gulim",e.Selawik="'"+Nn.Selawik+"'",e.Thai="'Leelawadee UI Web', 'Kmer UI'",e.Vietnamese="'"+Nn.Vietnamese+"'",e.WestEuropean="'"+Nn.WestEuropean+"'",e.Armenian="'"+Nn.Armenian+"'",e.Georgian="'"+Nn.Georgian+"'"}(Rn||(Rn={})),function(e){e.size10="10px",e.size12="12px",e.size14="14px",e.size16="16px",e.size18="18px",e.size20="20px",e.size24="24px",e.size28="28px",e.size32="32px",e.size42="42px",e.size68="68px",e.mini="10px",e.xSmall="10px",e.small="12px",e.smallPlus="12px",e.medium="14px",e.mediumPlus="16px",e.icon="16px",e.large="18px",e.xLarge="20px",e.xLargePlus="24px",e.xxLarge="28px",e.xxLargePlus="32px",e.superLarge="42px",e.mega="68px"}(An||(An={})),function(e){e.light=100,e.semilight=300,e.regular=400,e.semibold=600,e.bold=700}(On||(On={})),function(e){e.xSmall="10px",e.small="12px",e.medium="16px",e.large="20px"}(Ln||(Ln={}));var Wn,Kn="@media screen and (-ms-high-contrast: active), (forced-colors: active)";function Un(e,t){return"@media only screen"+("number"==typeof e?" and (min-width: "+e+"px)":"")+("number"==typeof t?" and (max-width: "+t+"px)":"")}function jn(e,t,n,o,r,i,s){return zn(e,"number"!=typeof t&&t?t:{inset:t,position:n,highContrastStyle:o,borderColor:r,outlineColor:i,isFocusedOnly:s})}function zn(e,t){var n,o;void 0===t&&(t={});var r=t.inset,i=void 0===r?0:r,s=t.width,a=void 0===s?1:s,u=t.position,l=void 0===u?"relative":u,c=t.highContrastStyle,d=t.borderColor,p=void 0===d?e.palette.white:d,m=t.outlineColor,h=void 0===m?e.palette.neutralSecondary:m,f=t.isFocusedOnly;return{outline:"transparent",position:l,selectors:(n={"::-moz-focus-inner":{border:"0"}},n[".ms-Fabric--isFocusVisible &"+(void 0===f||f?":focus":"")+":after"]={content:'""',position:"absolute",left:i+1,top:i+1,bottom:i+1,right:i+1,border:a+"px solid "+p,outline:a+"px solid "+h,zIndex:Wn.FocusStyle,selectors:(o={},o[Kn]=c,o)},n)}}!function(e){e.Nav=1,e.ScrollablePane=1,e.FocusStyle=1,e.Coachmark=1e3,e.Layer=1e6,e.KeytipLayer=1000001}(Wn||(Wn={}));var qn={position:"absolute",width:1,height:1,margin:-1,padding:0,border:0,overflow:"hidden"},Vn=Y((function(e,t){var n=U.getInstance();return t?Object.keys(e).reduce((function(t,o){return t[o]=n.getClassName(e[o]),t}),{}):e}));function Gn(e,t,n){return Vn(e,void 0!==n?n:t.disableGlobalClassNames)}n(8);var Zn,Yn={themeDarker:"#004578",themeDark:"#005a9e",themeDarkAlt:"#106ebe",themePrimary:"#0078d4",themeSecondary:"#2b88d8",themeTertiary:"#71afe5",themeLight:"#c7e0f4",themeLighter:"#deecf9",themeLighterAlt:"#eff6fc",black:"#000000",blackTranslucent40:"rgba(0,0,0,.4)",neutralDark:"#201f1e",neutralPrimary:"#323130",neutralPrimaryAlt:"#3b3a39",neutralSecondary:"#605e5c",neutralSecondaryAlt:"#8a8886",neutralTertiary:"#a19f9d",neutralTertiaryAlt:"#c8c6c4",neutralQuaternary:"#d2d0ce",neutralQuaternaryAlt:"#e1dfdd",neutralLight:"#edebe9",neutralLighter:"#f3f2f1",neutralLighterAlt:"#faf9f8",accent:"#0078d4",white:"#ffffff",whiteTranslucent40:"rgba(255,255,255,.4)",yellowDark:"#d29200",yellow:"#ffb900",yellowLight:"#fff100",orange:"#d83b01",orangeLight:"#ea4300",orangeLighter:"#ff8c00",redDark:"#a4262c",red:"#e81123",magentaDark:"#5c005c",magenta:"#b4009e",magentaLight:"#e3008c",purpleDark:"#32145a",purple:"#5c2d91",purpleLight:"#b4a0ff",blueDark:"#002050",blueMid:"#00188f",blue:"#0078d4",blueLight:"#00bcf2",tealDark:"#004b50",teal:"#008272",tealLight:"#00b294",greenDark:"#004b1c",green:"#107c10",greenLight:"#bad80a"};!function(e){e.depth0="0 0 0 0 transparent",e.depth4="0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)",e.depth8="0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)",e.depth16="0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)",e.depth64="0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)"}(Zn||(Zn={}));var Xn={elevation4:Zn.depth4,elevation8:Zn.depth8,elevation16:Zn.depth16,elevation64:Zn.depth64,roundedCorner2:"2px",roundedCorner4:"4px",roundedCorner6:"6px"};function Qn(e){U.getInstance().insertRule("@font-face{"+xt(rt(),e)+"}",!0)}var $n,Jn="'Segoe UI', '"+Nn.WestEuropean+"'",eo={ar:Rn.Arabic,bg:Rn.Cyrillic,cs:Rn.EastEuropean,el:Rn.Greek,et:Rn.EastEuropean,he:Rn.Hebrew,hi:Rn.Hindi,hr:Rn.EastEuropean,hu:Rn.EastEuropean,ja:Rn.Japanese,kk:Rn.EastEuropean,ko:Rn.Korean,lt:Rn.EastEuropean,lv:Rn.EastEuropean,pl:Rn.EastEuropean,ru:Rn.Cyrillic,sk:Rn.EastEuropean,"sr-latn":Rn.EastEuropean,th:Rn.Thai,tr:Rn.EastEuropean,uk:Rn.Cyrillic,vi:Rn.Vietnamese,"zh-hans":Rn.ChineseSimplified,"zh-hant":Rn.ChineseTraditional,hy:Rn.Armenian,ka:Rn.Georgian};function to(e,t,n){return{fontFamily:n,MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontSize:e,fontWeight:t}}var no,oo,ro,io,so,ao=(no=function(e){if(void 0===e&&(e="localStorage"),void 0===$n){var t=Tt(),n="localStorage"===e?function(e){var t=null;try{var n=f();t=n?n.localStorage.getItem(e):null}catch(e){}return t}("language"):"sessionStorage"===e?Pt("language"):void 0;n&&($n=n),void 0===$n&&t&&($n=t.documentElement.getAttribute("lang")),void 0===$n&&($n="en")}return $n}("sessionStorage"),oo=function(e){for(var t in eo)if(eo.hasOwnProperty(t)&&e&&0===t.indexOf(e))return eo[t];return Jn}(no)+", 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif",{tiny:to(An.mini,On.regular,oo),xSmall:to(An.xSmall,On.regular,oo),small:to(An.small,On.regular,oo),smallPlus:to(An.smallPlus,On.regular,oo),medium:to(An.medium,On.regular,oo),mediumPlus:to(An.mediumPlus,On.regular,oo),large:to(An.large,On.regular,oo),xLarge:to(An.xLarge,On.semibold,oo),xLargePlus:to(An.xLargePlus,On.semibold,oo),xxLarge:to(An.xxLarge,On.semibold,oo),xxLargePlus:to(An.xxLargePlus,On.semibold,oo),superLarge:to(An.superLarge,On.semibold,oo),mega:to(An.mega,On.semibold,oo)});function uo(e,t,n,o){Qn({fontFamily:e="'"+e+"'",src:(void 0!==o?"local('"+o+"'),":"")+"url('"+t+".woff2') format('woff2'),url('"+t+".woff') format('woff')",fontWeight:n,fontStyle:"normal",fontDisplay:"swap"})}function lo(e,t,n,o,r){void 0===o&&(o="segoeui");var i=e+"/"+n+"/"+o;uo(t,i+"-light",On.light,r&&r+" Light"),uo(t,i+"-semilight",On.semilight,r&&r+" SemiLight"),uo(t,i+"-regular",On.regular,r),uo(t,i+"-semibold",On.semibold,r&&r+" SemiBold"),uo(t,i+"-bold",On.bold,r&&r+" Bold")}function co(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var o=0,r=t;o<r.length;o++){var i=r[o];po(e||{},i)}return e}function po(e,t,n){for(var o in void 0===n&&(n=[]),n.push(t),t)if(t.hasOwnProperty(o)&&"__proto__"!==o&&"constructor"!==o&&"prototype"!==o){var r=t[o];if("object"!=typeof r||null===r||Array.isArray(r))e[o]=r;else{var i=n.indexOf(r)>-1;e[o]=i?r:po(e[o]||{},r,n)}}return n.pop(),e}function mo(e,t,n,o,r){return void 0===r&&(r=!1),function(e,t){var n="";!0===t&&(n=" /* @deprecated */");return e.listTextColor=e.listText+n,e.menuItemBackgroundChecked+=n,e.warningHighlight+=n,e.warningText=e.messageText+n,e.successText+=n,e}(ho(e,t,l({primaryButtonBorder:"transparent",errorText:o?"#F1707B":"#a4262c",messageText:o?"#F3F2F1":"#323130",messageLink:o?"#6CB8F6":"#005A9E",messageLinkHovered:o?"#82C7FF":"#004578",infoIcon:o?"#C8C6C4":"#605e5c",errorIcon:o?"#F1707B":"#A80000",blockingIcon:o?"#442726":"#FDE7E9",warningIcon:o?"#C8C6C4":"#797775",severeWarningIcon:o?"#FCE100":"#D83B01",successIcon:o?"#92C353":"#107C10",infoBackground:o?"#323130":"#f3f2f1",errorBackground:o?"#442726":"#FDE7E9",blockingBackground:o?"#442726":"#FDE7E9",warningBackground:o?"#433519":"#FFF4CE",severeWarningBackground:o?"#4F2A0F":"#FED9CC",successBackground:o?"#393D1B":"#DFF6DD",warningHighlight:o?"#fff100":"#ffb900",successText:o?"#92c353":"#107C10"},n),o),r)}function ho(e,t,n,o,r){var i,s,a;void 0===r&&(r=!1);var u={},c=e||{},d=c.white,p=c.black,m=c.themePrimary,h=c.themeDark,f=c.themeDarker,v=c.themeDarkAlt,g=c.themeLighter,_=c.neutralLight,y=c.neutralLighter,b=c.neutralDark,C=c.neutralQuaternary,E=c.neutralQuaternaryAlt,I=c.neutralPrimary,k=c.neutralSecondary,x=c.neutralSecondaryAlt,M=c.neutralTertiary,w=c.neutralTertiaryAlt,S=c.neutralLighterAlt,D=c.accent;return d&&(u.bodyBackground=d,u.bodyFrameBackground=d,u.accentButtonText=d,u.buttonBackground=d,u.primaryButtonText=d,u.primaryButtonTextHovered=d,u.primaryButtonTextPressed=d,u.inputBackground=d,u.inputForegroundChecked=d,u.listBackground=d,u.menuBackground=d,u.cardStandoutBackground=d),p&&(u.bodyTextChecked=p,u.buttonTextCheckedHovered=p),m&&(u.link=m,u.primaryButtonBackground=m,u.inputBackgroundChecked=m,u.inputIcon=m,u.inputFocusBorderAlt=m,u.menuIcon=m,u.menuHeader=m,u.accentButtonBackground=m),h&&(u.primaryButtonBackgroundPressed=h,u.inputBackgroundCheckedHovered=h,u.inputIconHovered=h),f&&(u.linkHovered=f),v&&(u.primaryButtonBackgroundHovered=v),g&&(u.inputPlaceholderBackgroundChecked=g),_&&(u.bodyBackgroundChecked=_,u.bodyFrameDivider=_,u.bodyDivider=_,u.variantBorder=_,u.buttonBackgroundCheckedHovered=_,u.buttonBackgroundPressed=_,u.listItemBackgroundChecked=_,u.listHeaderBackgroundPressed=_,u.menuItemBackgroundPressed=_,u.menuItemBackgroundChecked=_),y&&(u.bodyBackgroundHovered=y,u.buttonBackgroundHovered=y,u.buttonBackgroundDisabled=y,u.buttonBorderDisabled=y,u.primaryButtonBackgroundDisabled=y,u.disabledBackground=y,u.listItemBackgroundHovered=y,u.listHeaderBackgroundHovered=y,u.menuItemBackgroundHovered=y),C&&(u.primaryButtonTextDisabled=C,u.disabledSubtext=C),E&&(u.listItemBackgroundCheckedHovered=E),M&&(u.disabledBodyText=M,u.variantBorderHovered=(null===(i=n)||void 0===i?void 0:i.variantBorderHovered)||M,u.buttonTextDisabled=M,u.inputIconDisabled=M,u.disabledText=M),I&&(u.bodyText=I,u.actionLink=I,u.buttonText=I,u.inputBorderHovered=I,u.inputText=I,u.listText=I,u.menuItemText=I),S&&(u.bodyStandoutBackground=S,u.defaultStateBackground=S),b&&(u.actionLinkHovered=b,u.buttonTextHovered=b,u.buttonTextChecked=b,u.buttonTextPressed=b,u.inputTextHovered=b,u.menuItemTextHovered=b),k&&(u.bodySubtext=k,u.focusBorder=k,u.inputBorder=k,u.smallInputBorder=k,u.inputPlaceholderText=k),x&&(u.buttonBorder=x),w&&(u.disabledBodySubtext=w,u.disabledBorder=w,u.buttonBackgroundChecked=w,u.menuDivider=w),D&&(u.accentButtonBackground=D),(null===(s=t)||void 0===s?void 0:s.elevation4)&&(u.cardShadow=t.elevation4),!o&&(null===(a=t)||void 0===a?void 0:a.elevation8)?u.cardShadowHovered=t.elevation8:u.variantBorderHovered&&(u.cardShadowHovered="0 0 1px "+u.variantBorderHovered),u=l(l({},u),n)}!function(e){if(e){var t=e+"/fonts";lo(t,Nn.Thai,"leelawadeeui-thai","leelawadeeui"),lo(t,Nn.Arabic,"segoeui-arabic"),lo(t,Nn.Cyrillic,"segoeui-cyrillic"),lo(t,Nn.EastEuropean,"segoeui-easteuropean"),lo(t,Nn.Greek,"segoeui-greek"),lo(t,Nn.Hebrew,"segoeui-hebrew"),lo(t,Nn.Vietnamese,"segoeui-vietnamese"),lo(t,Nn.WestEuropean,"segoeui-westeuropean","segoeui","Segoe UI"),lo(t,Rn.Selawik,"selawik","selawik"),lo(t,Nn.Armenian,"segoeui-armenian"),lo(t,Nn.Georgian,"segoeui-georgian"),uo("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-semilight",On.light),uo("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-bold",On.semibold)}}(null!=(so=null===(io=null===(ro=f())||void 0===ro?void 0:ro.FabricConfig)||void 0===io?void 0:io.fontBaseUrl)?so:"https://static2.sharepointonline.com/files/fabric/assets");var fo={s2:"4px",s1:"8px",m:"16px",l1:"20px",l2:"32px"};function vo(e,t){void 0===e&&(e={}),void 0===t&&(t=!1);var n=!!e.isInverted;return function(e,t){var n,o,r,i;void 0===t&&(t={});var s=co({},e,t,{semanticColors:ho(t.palette,t.effects,t.semanticColors,void 0===t.isInverted?e.isInverted:t.isInverted)});if((null===(n=t.palette)||void 0===n?void 0:n.themePrimary)&&!(null===(o=t.palette)||void 0===o?void 0:o.accent)&&(s.palette.accent=t.palette.themePrimary),t.defaultFontStyle)for(var a=0,u=Object.keys(s.fonts);a<u.length;a++){var l=u[a];s.fonts[l]=co(s.fonts[l],t.defaultFontStyle,null===(i=null===(r=t)||void 0===r?void 0:r.fonts)||void 0===i?void 0:i[l])}return t.stylesheets&&(s.stylesheets=(e.stylesheets||[]).concat(t.stylesheets)),s}({palette:Yn,effects:Xn,fonts:ao,spacing:fo,isInverted:n,disableGlobalClassNames:!1,semanticColors:mo(Yn,Xn,void 0,n,t),rtl:void 0},e)}var go=vo({});function _o(){var e,t,n;if(!P.getSettings(["theme"]).theme){var o=f();(null===(n=null===(t=o)||void 0===t?void 0:t.FabricConfig)||void 0===n?void 0:n.theme)&&(go=vo(o.FabricConfig.theme)),P.applySettings(((e={}).theme=go,e))}}_o();var yo=x.getValue("icons",{__options:{disableWarnings:!1,warnOnMissingIcons:!0},__remapped:{}}),bo=U.getInstance();bo&&bo.onReset&&bo.onReset((function(){for(var e in yo)yo.hasOwnProperty(e)&&yo[e].subset&&(yo[e].subset.className=void 0)}));var Co=function(e){return e.toLowerCase()};var Eo=n(9);Object(Eo.a)("@uifabric/styling","7.18.1"),_o();var Io={root:"ms-Image",rootMaximizeFrame:"ms-Image--maximizeFrame",image:"ms-Image-image",imageCenter:"ms-Image-image--center",imageContain:"ms-Image-image--contain",imageCover:"ms-Image-image--cover",imageCenterContain:"ms-Image-image--centerContain",imageCenterCover:"ms-Image-image--centerCover",imageNone:"ms-Image-image--none",imageLandscape:"ms-Image-image--landscape",imagePortrait:"ms-Image-image--portrait"},ko=et(zt,(function(e){var t=e.className,n=e.width,o=e.height,r=e.maximizeFrame,i=e.isLoaded,s=e.shouldFadeIn,a=e.shouldStartVisible,u=e.isLandscape,l=e.isCenter,c=e.isContain,d=e.isCover,p=e.isCenterContain,m=e.isCenterCover,h=e.isNone,v=e.isError,g=e.isNotImageFit,_=e.theme,y=Gn(Io,_),b={position:"absolute",left:"50% /* @noflip */",top:"50%",transform:"translate(-50%,-50%)"},C=f(),E=void 0!==C&&void 0===C.navigator.msMaxTouchPoints,I=c&&u||d&&!u?{width:"100%",height:"auto"}:{width:"auto",height:"100%"};return{root:[y.root,_.fonts.medium,{overflow:"hidden"},r&&[y.rootMaximizeFrame,{height:"100%",width:"100%"}],i&&s&&!a&&Hn.fadeIn400,(l||c||d||p||m)&&{position:"relative"},t],image:[y.image,{display:"block",opacity:0},i&&["is-loaded",{opacity:1}],l&&[y.imageCenter,b],c&&[y.imageContain,E&&{width:"100%",height:"100%",objectFit:"contain"},!E&&I,b],d&&[y.imageCover,E&&{width:"100%",height:"100%",objectFit:"cover"},!E&&I,b],p&&[y.imageCenterContain,u&&{maxWidth:"100%"},!u&&{maxHeight:"100%"},b],m&&[y.imageCenterCover,u&&{maxHeight:"100%"},!u&&{maxWidth:"100%"},b],h&&[y.imageNone,{width:"auto",height:"auto"}],g&&[!!n&&!o&&{height:"auto",width:"100%"},!n&&!!o&&{height:"100%",width:"auto"},!!n&&!!o&&{height:"100%",width:"100%"}],u&&y.imageLandscape,!u&&y.imagePortrait,!i&&"is-notLoaded",s&&"is-fadeIn",v&&"is-error"]}}),void 0,{scope:"Image"},!0),xo=St({root:{display:"inline-block"},placeholder:["ms-Icon-placeHolder",{width:"1em"}],image:["ms-Icon-imageContainer",{overflow:"hidden"}]}),Mo=Y((function(e){var t=function(e){var t=void 0,n=yo.__options;if(e=e?Co(e):"",e=yo.__remapped[e]||e)if(t=yo[e]){var o=t.subset;o&&o.fontFace&&(o.isRegistered||(Qn(o.fontFace),o.isRegistered=!0),o.className||(o.className=qt(o.style,{fontFamily:o.fontFace.fontFamily,fontWeight:o.fontFace.fontWeight||"normal",fontStyle:o.fontFace.fontStyle||"normal"})))}else!n.disableWarnings&&n.warnOnMissingIcons&&C('The icon "'+e+'" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.');return t}(e)||{subset:{},code:void 0},n=t.code,o=t.subset;return n?{children:n,iconClassName:o.className,fontFamily:o.fontFace&&o.fontFace.fontFamily}:null}),void 0,!0),wo=function(e){var t=e.iconName,n=e.className,r=e.style,i=void 0===r?{}:r,s=Mo(t)||{},a=s.iconClassName,u=s.children,c=s.fontFamily,d=Re(e,De),p=e["aria-label"]?{}:{role:"presentation","aria-hidden":!0};return o.createElement("i",l({"data-icon-name":t},p,d,{className:$("ms-Icon",xo.root,a,!t&&xo.placeholder,n),style:l({fontFamily:c},i)}),u)},So=(Y((function(e,t,n){return wo({iconName:e,className:t,"aria-label":n})})),Wt({cacheSize:100})),Do=et(function(e){function t(t){var n=e.call(this,t)||this;return n._onImageLoadingStateChange=function(e){n.props.imageProps&&n.props.imageProps.onLoadingStateChange&&n.props.imageProps.onLoadingStateChange(e),e===Ht.error&&n.setState({imageLoadError:!0})},n.state={imageLoadError:!1},n}return u(t,e),t.prototype.render=function(){var e=this.props,t=e.children,n=e.className,r=e.styles,i=e.iconName,s=e.imageErrorAs,a=e.theme,u="string"==typeof i&&0===i.length,c=!!this.props.imageProps||this.props.iconType===Qe.image||this.props.iconType===Qe.Image,d=Mo(i)||{},p=d.iconClassName,m=d.children,h=So(r,{theme:a,className:n,iconClassName:p,isImage:c,isPlaceholder:u}),f=c?"span":"i",v=Re(this.props,De,["aria-label"]),g=this.state.imageLoadError,_=l(l({},this.props.imageProps),{onLoadingStateChange:this._onImageLoadingStateChange}),y=g&&s||ko,b=this.props["aria-label"]||this.props.ariaLabel,C=b?{"aria-label":b}:{"aria-hidden":!this.props["aria-labelledby"]&&!_["aria-labelledby"]};return o.createElement(f,l({"data-icon-name":i},C,v,{className:h.root}),c?o.createElement(y,l({},_)):t||m)},t}(o.Component),(function(e){var t=e.className,n=e.iconClassName,o=e.isPlaceholder,r=e.isImage,i=e.styles;return{root:[o&&xo.placeholder,xo.root,r&&xo.image,n,t,i&&i.root,i&&i.imageContainer]}}),void 0,{scope:"Icon"},!0);Do.displayName="Icon";var To,Po=function(e){var t=e.className,n=e.imageProps,r=Re(e,De),i=e["aria-label"]?{}:{role:"presentation","aria-hidden":!n.alt&&!n["aria-labelledby"]};return o.createElement("div",l({},i,r,{className:$("ms-Icon",xo.root,xo.image,t)}),o.createElement(ko,l({},n)))},Bo=0,Fo=1,No=2,Ro=3,Ao=4,Oo=5,Lo=6,Ho=7,Wo=8,Ko=9,Uo=10,jo=11,zo=12,qo=13;!function(e){e[e.Normal=0]="Normal",e[e.Divider=1]="Divider",e[e.Header=2]="Header",e[e.Section=3]="Section"}(To||(To={}));var Vo,Go=1,Zo=2;function Yo(e,t,n){void 0===n&&(n=!0);var o=!1;if(e&&t)if(n)if(e===t)o=!0;else for(o=!1;t;){var r=J(t);if(r===e){o=!0;break}t=r}else e.contains&&(o=e.contains(t));return o}!function(e){e[e.vertical=0]="vertical",e[e.horizontal=1]="horizontal",e[e.bidirectional=2]="bidirectional",e[e.domOrder=3]="domOrder"}(Vo||(Vo={}));function Xo(e){var t=$o(e,e,!0,!1,!1,!0);return!!t&&(function(e){if(e){if(ir)return void(ir=e);ir=e;var t=f(e);t&&t.requestAnimationFrame((function(){var e=ir;ir=void 0,e&&(e.getAttribute&&"true"===e.getAttribute("data-is-focusable")&&(e.getAttribute("tabindex")||e.setAttribute("tabindex","0")),e.focus())}))}}(t),!0)}function Qo(e,t,n,o,r,i,s,a){if(!t||!s&&t===e)return null;var u=Jo(t);if(r&&u&&(i||!tr(t)&&!nr(t))){var l=Qo(e,t.lastElementChild,!0,!0,!0,i,s,a);if(l){if(a&&er(l,!0)||!a)return l;var c=Qo(e,l.previousElementSibling,!0,!0,!0,i,s,a);if(c)return c;for(var d=l.parentElement;d&&d!==t;){var p=Qo(e,d.previousElementSibling,!0,!0,!0,i,s,a);if(p)return p;d=d.parentElement}}}if(n&&u&&er(t,a))return t;var m=Qo(e,t.previousElementSibling,!0,!0,!0,i,s,a);return m||(o?null:Qo(e,t.parentElement,!0,!1,!1,i,s,a))}function $o(e,t,n,o,r,i,s,a){if(!t||t===e&&r&&!s)return null;var u=Jo(t);if(n&&u&&er(t,a))return t;if(!r&&u&&(i||!tr(t)&&!nr(t))){var l=$o(e,t.firstElementChild,!0,!0,!1,i,s,a);if(l)return l}if(t===e)return null;var c=$o(e,t.nextElementSibling,!0,!0,!1,i,s,a);return c||(o?null:$o(e,t.parentElement,!1,!1,!0,i,s,a))}function Jo(e){if(!e||!e.getAttribute)return!1;var t=e.getAttribute("data-is-visible");return null!=t?"true"===t:0!==e.offsetHeight||null!==e.offsetParent||!0===e.isVisible}function er(e,t){if(!e||e.disabled)return!1;var n=0,o=null;e&&e.getAttribute&&(o=e.getAttribute("tabIndex"))&&(n=parseInt(o,10));var r=e.getAttribute?e.getAttribute("data-is-focusable"):null,i=null!==o&&n>=0,s=!!e&&"false"!==r&&("A"===e.tagName||"BUTTON"===e.tagName||"INPUT"===e.tagName||"TEXTAREA"===e.tagName||"SELECT"===e.tagName||"true"===r||i);return t?-1!==n&&s:s}function tr(e){return!!(e&&e.getAttribute&&e.getAttribute("data-focuszone-id"))}function nr(e){return!(!e||!e.getAttribute||"true"!==e.getAttribute("data-is-sub-focuszone"))}function or(e,t){return"true"!==function(e,t){var n=ee(e,(function(e){return e.hasAttribute(t)}));return n&&n.getAttribute(t)}(e,t)}var rr,ir=void 0;function sr(e){var t=function(e){var t;"function"==typeof Event?t=new Event(e):(t=document.createEvent("Event")).initEvent(e,!0,!0);return t}("MouseEvents");t.initEvent("click",!0,!0),e.dispatchEvent(t)}qt({overflow:"hidden !important"});function ar(){if(void 0===rr){var e=document.createElement("div");e.style.setProperty("width","100px"),e.style.setProperty("height","100px"),e.style.setProperty("overflow","scroll"),e.style.setProperty("position","absolute"),e.style.setProperty("top","-9999px"),document.body.appendChild(e),rr=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return rr}function ur(e){for(var t=e,n=Tt(e);t&&t!==n.body;){if("true"===t.getAttribute("data-is-scrollable"))return t;t=t.parentElement}for(t=e;t&&t!==n.body;){if("false"!==t.getAttribute("data-is-scrollable")){var o=getComputedStyle(t),r=o?o.getPropertyValue("overflow-y"):"";if(r&&("scroll"===r||"auto"===r))return t}t=t.parentElement}return t&&t!==n.body||(t=f(e)),t}var lr;var cr,dr={},pr=new Set,mr=["text","number","password","email","tel","url","search"],hr=function(e){function t(t){var n=e.call(this,t)||this;return n._root=o.createRef(),n._mergedRef=Ze(),n._onFocus=function(e){if(!n._portalContainsElement(e.target)){var t,o=n.props,r=o.onActiveElementChanged,i=o.doNotAllowFocusEventToPropagate,s=o.stopFocusPropagation,a=o.onFocusNotification,u=o.onFocus,l=o.shouldFocusInnerElementWhenReceivedFocus,c=o.defaultTabbableElement,d=n._isImmediateDescendantOfZone(e.target);if(d)t=e.target;else for(var p=e.target;p&&p!==n._root.current;){if(er(p)&&n._isImmediateDescendantOfZone(p)){t=p;break}p=J(p,!1)}if(l&&e.target===n._root.current){var m=c&&"function"==typeof c&&c(n._root.current);m&&er(m)?(t=m,m.focus()):(n.focus(!0),n._activeElement&&(t=null))}var h=!n._activeElement;t&&t!==n._activeElement&&((d||h)&&n._setFocusAlignment(t,!0,!0),n._activeElement=t,h&&n._updateTabIndexes()),r&&r(n._activeElement,e),(s||i)&&e.stopPropagation(),u?u(e):a&&a()}},n._onBlur=function(){n._setParkedFocus(!1)},n._onMouseDown=function(e){if(!n._portalContainsElement(e.target)&&!n.props.disabled){for(var t=e.target,o=[];t&&t!==n._root.current;)o.push(t),t=J(t,!1);for(;o.length&&((t=o.pop())&&er(t)&&n._setActiveElement(t,!0),!tr(t)););}},n._onKeyDown=function(e,t){if(!n._portalContainsElement(e.target)){var o=n.props,r=o.direction,i=o.disabled,s=o.isInnerZoneKeystroke,a=o.pagingSupportDisabled,u=o.shouldEnterInnerZone;if(!(i||(n.props.onKeyDown&&n.props.onKeyDown(e),e.isDefaultPrevented()||n._getDocument().activeElement===n._root.current&&n._isInnerZone))){if((u&&u(e)||s&&s(e))&&n._isImmediateDescendantOfZone(e.target)){var l=n._getFirstInnerZone();if(l){if(!l.focus(!0))return}else{if(!nr(e.target))return;if(!n.focusElement($o(e.target,e.target.firstChild,!0)))return}}else{if(e.altKey)return;switch(e.which){case se:if(n._tryInvokeClickForFocusable(e.target))break;return;case de:if(r!==Vo.vertical&&(n._preventDefaultWhenHandled(e),n._moveFocusLeft(t)))break;return;case me:if(r!==Vo.vertical&&(n._preventDefaultWhenHandled(e),n._moveFocusRight(t)))break;return;case pe:if(r!==Vo.horizontal&&(n._preventDefaultWhenHandled(e),n._moveFocusUp()))break;return;case he:if(r!==Vo.horizontal&&(n._preventDefaultWhenHandled(e),n._moveFocusDown()))break;return;case ue:if(!a&&n._moveFocusPaging(!0))break;return;case ae:if(!a&&n._moveFocusPaging(!1))break;return;case ne:if(n.props.allowTabKey||n.props.handleTabKey===Go||n.props.handleTabKey===Zo&&n._isElementInput(e.target)){var c=!1;if(n._processingTabKey=!0,r!==Vo.vertical&&n._shouldWrapFocus(n._activeElement,"data-no-horizontal-wrap"))c=(Nt(t)?!e.shiftKey:e.shiftKey)?n._moveFocusLeft(t):n._moveFocusRight(t);else c=e.shiftKey?n._moveFocusUp():n._moveFocusDown();if(n._processingTabKey=!1,c)break;n.props.shouldResetActiveElementWhenTabFromZone&&(n._activeElement=null)}return;case ce:if(n._isContentEditableElement(e.target)||n._isElementInput(e.target)&&!n._shouldInputLoseFocus(e.target,!1))return!1;var d=n._root.current&&n._root.current.firstChild;if(n._root.current&&d&&n.focusElement($o(n._root.current,d,!0)))break;return;case le:if(n._isContentEditableElement(e.target)||n._isElementInput(e.target)&&!n._shouldInputLoseFocus(e.target,!0))return!1;var p=n._root.current&&n._root.current.lastChild;if(n._root.current&&n.focusElement(Qo(n._root.current,p,!0,!0,!0)))break;return;case oe:if(n._tryInvokeClickForFocusable(e.target))break;return;default:return}}e.preventDefault(),e.stopPropagation()}}},n._getHorizontalDistanceFromCenter=function(e,t,o){var r=n._focusAlignment.left||n._focusAlignment.x||0,i=Math.floor(o.top),s=Math.floor(t.bottom),a=Math.floor(o.bottom),u=Math.floor(t.top);return e&&i>s||!e&&a<u?r>=o.left&&r<=o.left+o.width?0:Math.abs(o.left+o.width/2-r):n._shouldWrapFocus(n._activeElement,"data-no-vertical-wrap")?999999999:-999999999},ve(n),n._id=Ie("FocusZone"),n._focusAlignment={left:0,top:0},n._processingTabKey=!1,n}return u(t,e),t.getOuterZones=function(){return pr.size},t._onKeyDownCapture=function(e){e.which===ne&&pr.forEach((function(e){return e._updateTabIndexes()}))},t.prototype.componentDidMount=function(){var e=this._root.current;if(dr[this._id]=this,e){this._windowElement=f(e);for(var n=J(e,!1);n&&n!==this._getDocument().body&&1===n.nodeType;){if(tr(n)){this._isInnerZone=!0;break}n=J(n,!1)}this._isInnerZone||(pr.add(this),this._windowElement&&1===pr.size&&this._windowElement.addEventListener("keydown",t._onKeyDownCapture,!0)),this._root.current&&this._root.current.addEventListener("blur",this._onBlur,!0),this._updateTabIndexes(),this.props.defaultTabbableElement&&"string"==typeof this.props.defaultTabbableElement?this._activeElement=this._getDocument().querySelector(this.props.defaultTabbableElement):this.props.defaultActiveElement&&(this._activeElement=this._getDocument().querySelector(this.props.defaultActiveElement)),this.props.shouldFocusOnMount&&this.focus()}},t.prototype.componentDidUpdate=function(){var e=this._root.current,t=this._getDocument();if(t&&this._lastIndexPath&&(t.activeElement===t.body||null===t.activeElement||!this.props.preventFocusRestoration&&t.activeElement===e)){var n=function(e,t){for(var n=e,o=0,r=t;o<r.length;o++){var i=r[o],s=n.children[Math.min(i,n.children.length-1)];if(!s)break;n=s}return n=er(n)&&Jo(n)?n:$o(e,n,!0)||Qo(e,n)}(e,this._lastIndexPath);n?(this._setActiveElement(n,!0),n.focus(),this._setParkedFocus(!1)):this._setParkedFocus(!0)}},t.prototype.componentWillUnmount=function(){delete dr[this._id],this._isInnerZone||(pr.delete(this),this._windowElement&&0===pr.size&&this._windowElement.removeEventListener("keydown",t._onKeyDownCapture,!0)),this._root.current&&this._root.current.removeEventListener("blur",this._onBlur,!0),this._activeElement=null,this._defaultFocusElement=null},t.prototype.render=function(){var e=this,t=this.props,n=t.as,r=t.elementType,i=t.rootProps,s=t.ariaDescribedBy,a=t.ariaLabelledBy,u=t.className,c=Re(this.props,De),d=n||r||"div";this._evaluateFocusBeforeRender();var p,m=(void 0===p&&(p=!1),!0===p&&(go=vo({},p)),go);return o.createElement(d,l({"aria-labelledby":a,"aria-describedby":s},c,i,{className:$((lr||(lr=qt({selectors:{":focus":{outline:"none"}}},"ms-FocusZone")),lr),u),ref:this._mergedRef(this.props.elementRef,this._root),"data-focuszone-id":this._id,onKeyDown:function(t){return e._onKeyDown(t,m)},onFocus:this._onFocus,onMouseDownCapture:this._onMouseDown}),this.props.children)},t.prototype.focus=function(e){if(void 0===e&&(e=!1),this._root.current){if(!e&&"true"===this._root.current.getAttribute("data-is-focusable")&&this._isInnerZone){var t=this._getOwnerZone(this._root.current);if(t!==this._root.current){var n=dr[t.getAttribute("data-focuszone-id")];return!!n&&n.focusElement(this._root.current)}return!1}if(!e&&this._activeElement&&Yo(this._root.current,this._activeElement)&&er(this._activeElement))return this._activeElement.focus(),!0;var o=this._root.current.firstChild;return this.focusElement($o(this._root.current,o,!0))}return!1},t.prototype.focusLast=function(){if(this._root.current){var e=this._root.current&&this._root.current.lastChild;return this.focusElement(Qo(this._root.current,e,!0,!0,!0))}return!1},t.prototype.focusElement=function(e,t){var n=this.props,o=n.onBeforeFocus,r=n.shouldReceiveFocus;return!(r&&!r(e)||o&&!o(e))&&(!!e&&(this._setActiveElement(e,t),this._activeElement&&this._activeElement.focus(),!0))},t.prototype.setFocusAlignment=function(e){this._focusAlignment=e},t.prototype._evaluateFocusBeforeRender=function(){var e=this._root.current,t=this._getDocument();if(t){var n=t.activeElement;if(n!==e){var o=Yo(e,n,!1);this._lastIndexPath=o?function(e,t){for(var n=[];t&&e&&t!==e;){var o=J(t,!0);if(null===o)return[];n.unshift(Array.prototype.indexOf.call(o.children,t)),t=o}return n}(e,n):void 0}}},t.prototype._setParkedFocus=function(e){var t=this._root.current;t&&this._isParked!==e&&(this._isParked=e,e?(this.props.allowFocusRoot||(this._parkedTabIndex=t.getAttribute("tabindex"),t.setAttribute("tabindex","-1")),t.focus()):this.props.allowFocusRoot||(this._parkedTabIndex?(t.setAttribute("tabindex",this._parkedTabIndex),this._parkedTabIndex=void 0):t.removeAttribute("tabindex")))},t.prototype._setActiveElement=function(e,t){var n=this._activeElement;this._activeElement=e,n&&(tr(n)&&this._updateTabIndexes(n),n.tabIndex=-1),this._activeElement&&(this._focusAlignment&&!t||this._setFocusAlignment(e,!0,!0),this._activeElement.tabIndex=0)},t.prototype._preventDefaultWhenHandled=function(e){this.props.preventDefaultWhenHandled&&e.preventDefault()},t.prototype._tryInvokeClickForFocusable=function(e){if(e===this._root.current||!this.props.shouldRaiseClicks)return!1;do{if("BUTTON"===e.tagName||"A"===e.tagName||"INPUT"===e.tagName||"TEXTAREA"===e.tagName)return!1;if(this._isImmediateDescendantOfZone(e)&&"true"===e.getAttribute("data-is-focusable")&&"true"!==e.getAttribute("data-disable-click-on-enter"))return sr(e),!0;e=J(e,!1)}while(e!==this._root.current);return!1},t.prototype._getFirstInnerZone=function(e){if(!(e=e||this._activeElement||this._root.current))return null;if(tr(e))return dr[e.getAttribute("data-focuszone-id")];for(var t=e.firstElementChild;t;){if(tr(t))return dr[t.getAttribute("data-focuszone-id")];var n=this._getFirstInnerZone(t);if(n)return n;t=t.nextElementSibling}return null},t.prototype._moveFocus=function(e,t,n,o){void 0===o&&(o=!0);var r=this._activeElement,i=-1,s=void 0,a=!1,u=this.props.direction===Vo.bidirectional;if(!r||!this._root.current)return!1;if(this._isElementInput(r)&&!this._shouldInputLoseFocus(r,e))return!1;var l=u?r.getBoundingClientRect():null;do{if(r=e?$o(this._root.current,r):Qo(this._root.current,r),!u){s=r;break}if(r){var c=t(l,r.getBoundingClientRect());if(-1===c&&-1===i){s=r;break}if(c>-1&&(-1===i||c<i)&&(i=c,s=r),i>=0&&c<0)break}}while(r);if(s&&s!==this._activeElement)a=!0,this.focusElement(s);else if(this.props.isCircularNavigation&&o)return e?this.focusElement($o(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(Qo(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return a},t.prototype._moveFocusDown=function(){var e=this,t=-1,n=this._focusAlignment.left||this._focusAlignment.x||0;return!!this._moveFocus(!0,(function(o,r){var i=-1,s=Math.floor(r.top),a=Math.floor(o.bottom);return s<a?e._shouldWrapFocus(e._activeElement,"data-no-vertical-wrap")?999999999:-999999999:((-1===t&&s>=a||s===t)&&(t=s,i=n>=r.left&&n<=r.left+r.width?0:Math.abs(r.left+r.width/2-n)),i)}))&&(this._setFocusAlignment(this._activeElement,!1,!0),!0)},t.prototype._moveFocusUp=function(){var e=this,t=-1,n=this._focusAlignment.left||this._focusAlignment.x||0;return!!this._moveFocus(!1,(function(o,r){var i=-1,s=Math.floor(r.bottom),a=Math.floor(r.top),u=Math.floor(o.top);return s>u?e._shouldWrapFocus(e._activeElement,"data-no-vertical-wrap")?999999999:-999999999:((-1===t&&s<=u||a===t)&&(t=a,i=n>=r.left&&n<=r.left+r.width?0:Math.abs(r.left+r.width/2-n)),i)}))&&(this._setFocusAlignment(this._activeElement,!1,!0),!0)},t.prototype._moveFocusLeft=function(e){var t=this,n=this._shouldWrapFocus(this._activeElement,"data-no-horizontal-wrap");return!!this._moveFocus(Nt(e),(function(o,r){var i=-1;return(Nt(e)?parseFloat(r.top.toFixed(3))<parseFloat(o.bottom.toFixed(3)):parseFloat(r.bottom.toFixed(3))>parseFloat(o.top.toFixed(3)))&&r.right<=o.right&&t.props.direction!==Vo.vertical?i=o.right-r.right:n||(i=-999999999),i}),void 0,n)&&(this._setFocusAlignment(this._activeElement,!0,!1),!0)},t.prototype._moveFocusRight=function(e){var t=this,n=this._shouldWrapFocus(this._activeElement,"data-no-horizontal-wrap");return!!this._moveFocus(!Nt(e),(function(o,r){var i=-1;return(Nt(e)?parseFloat(r.bottom.toFixed(3))>parseFloat(o.top.toFixed(3)):parseFloat(r.top.toFixed(3))<parseFloat(o.bottom.toFixed(3)))&&r.left>=o.left&&t.props.direction!==Vo.vertical?i=r.left-o.left:n||(i=-999999999),i}),void 0,n)&&(this._setFocusAlignment(this._activeElement,!0,!1),!0)},t.prototype._moveFocusPaging=function(e,t){void 0===t&&(t=!0);var n=this._activeElement;if(!n||!this._root.current)return!1;if(this._isElementInput(n)&&!this._shouldInputLoseFocus(n,e))return!1;var o=ur(n);if(!o)return!1;var r=-1,i=void 0,s=-1,a=-1,u=o.clientHeight,l=n.getBoundingClientRect();do{if(n=e?$o(this._root.current,n):Qo(this._root.current,n)){var c=n.getBoundingClientRect(),d=Math.floor(c.top),p=Math.floor(l.bottom),m=Math.floor(c.bottom),h=Math.floor(l.top),f=this._getHorizontalDistanceFromCenter(e,l,c);if(e&&d>p+u||!e&&m<h-u)break;f>-1&&(e&&d>s?(s=d,r=f,i=n):!e&&m<a?(a=m,r=f,i=n):(-1===r||f<=r)&&(r=f,i=n))}}while(n);var v=!1;if(i&&i!==this._activeElement)v=!0,this.focusElement(i),this._setFocusAlignment(i,!1,!0);else if(this.props.isCircularNavigation&&t)return e?this.focusElement($o(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(Qo(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return v},t.prototype._setFocusAlignment=function(e,t,n){if(this.props.direction===Vo.bidirectional&&(!this._focusAlignment||t||n)){var o=e.getBoundingClientRect(),r=o.left+o.width/2,i=o.top+o.height/2;this._focusAlignment||(this._focusAlignment={left:r,top:i}),t&&(this._focusAlignment.left=r),n&&(this._focusAlignment.top=i)}},t.prototype._isImmediateDescendantOfZone=function(e){return this._getOwnerZone(e)===this._root.current},t.prototype._getOwnerZone=function(e){for(var t=J(e,!1);t&&t!==this._root.current&&t!==this._getDocument().body;){if(tr(t))return t;t=J(t,!1)}return t},t.prototype._updateTabIndexes=function(e){!this._activeElement&&this.props.defaultTabbableElement&&"function"==typeof this.props.defaultTabbableElement&&(this._activeElement=this.props.defaultTabbableElement(this._root.current)),!e&&this._root.current&&(this._defaultFocusElement=null,e=this._root.current,this._activeElement&&!Yo(e,this._activeElement)&&(this._activeElement=null)),this._activeElement&&!er(this._activeElement)&&(this._activeElement=null);for(var t=e&&e.children,n=0;t&&n<t.length;n++){var o=t[n];tr(o)?"true"===o.getAttribute("data-is-focusable")&&(this._isInnerZone||(this._activeElement||this._defaultFocusElement)&&this._activeElement!==o?"-1"!==o.getAttribute("tabindex")&&o.setAttribute("tabindex","-1"):(this._defaultFocusElement=o,"0"!==o.getAttribute("tabindex")&&o.setAttribute("tabindex","0"))):(o.getAttribute&&"false"===o.getAttribute("data-is-focusable")&&o.setAttribute("tabindex","-1"),er(o)?this.props.disabled?o.setAttribute("tabindex","-1"):this._isInnerZone||(this._activeElement||this._defaultFocusElement)&&this._activeElement!==o?"-1"!==o.getAttribute("tabindex")&&o.setAttribute("tabindex","-1"):(this._defaultFocusElement=o,"0"!==o.getAttribute("tabindex")&&o.setAttribute("tabindex","0")):"svg"===o.tagName&&"false"!==o.getAttribute("focusable")&&o.setAttribute("focusable","false")),this._updateTabIndexes(o)}},t.prototype._isContentEditableElement=function(e){return e&&"true"===e.getAttribute("contenteditable")},t.prototype._isElementInput=function(e){return!(!e||!e.tagName||"input"!==e.tagName.toLowerCase()&&"textarea"!==e.tagName.toLowerCase())},t.prototype._shouldInputLoseFocus=function(e,t){if(!this._processingTabKey&&e&&e.type&&mr.indexOf(e.type.toLowerCase())>-1){var n=e.selectionStart,o=n!==e.selectionEnd,r=e.value,i=e.readOnly;if(o||n>0&&!t&&!i||n!==r.length&&t&&!i||this.props.handleTabKey&&(!this.props.shouldInputLoseFocusOnArrowKey||!this.props.shouldInputLoseFocusOnArrowKey(e)))return!1}return!0},t.prototype._shouldWrapFocus=function(e,t){return!this.props.checkForNoWrap||or(e,t)},t.prototype._portalContainsElement=function(e){return e&&!!this._root.current&&te(e,this._root.current)},t.prototype._getDocument=function(){return Tt(this._root.current)},t.defaultProps={isCircularNavigation:!1,direction:Vo.bidirectional,shouldRaiseClicks:!0},t}(o.Component);function fr(e){if(void 0===cr||e){var t=f(),n=t&&t.navigator.userAgent;cr=!!n&&-1!==n.indexOf("Macintosh")}return!!cr}var vr=function(){return!!(window&&window.navigator&&window.navigator.userAgent)&&/iPad|iPhone|iPod/i.test(window.navigator.userAgent)};function gr(e){return e.canCheck?!(!e.isChecked&&!e.checked):"boolean"==typeof e.isChecked?e.isChecked:"boolean"==typeof e.checked?e.checked:null}function _r(e){return!(!e.subMenuProps&&!e.items)}function yr(e){return!(!e.isDisabled&&!e.disabled)}function br(e){return null!==gr(e)?"menuitemcheckbox":"menuitem"}var Cr=["setState","render","componentWillMount","UNSAFE_componentWillMount","componentDidMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","getSnapshotBeforeUpdate","UNSAFE_componentWillUpdate","componentDidUpdate","componentWillUnmount"];var Er,Ir=function(e){function t(t){var n=e.call(this,t)||this;return n._updateComposedComponentRef=n._updateComposedComponentRef.bind(n),n}return u(t,e),t.prototype._updateComposedComponentRef=function(e){var t;this._composedComponentInstance=e,e?this._hoisted=function(e,t,n){void 0===n&&(n=Cr);var o=[],r=function(r){"function"!=typeof t[r]||void 0!==e[r]||n&&-1!==n.indexOf(r)||(o.push(r),e[r]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];t[r].apply(t,e)})};for(var i in t)r(i);return o}(this,e):this._hoisted&&(t=this,this._hoisted.forEach((function(e){return delete t[e]})))},t}(o.Component),kr=o.createContext({window:"object"==typeof window?window:void 0});!function(e){e[e.small=0]="small",e[e.medium=1]="medium",e[e.large=2]="large",e[e.xLarge=3]="xLarge",e[e.xxLarge=4]="xxLarge",e[e.xxxLarge=5]="xxxLarge",e[e.unknown=999]="unknown"}(Er||(Er={}));var xr,Mr,wr,Sr,Dr=[479,639,1023,1365,1919,99999999];function Tr(){return xr||Mr||Er.large}function Pr(e){var t,n=((t=function(t){function n(e){var n=t.call(this,e)||this;return n._onResize=function(){var e=Br(n.context.window);e!==n.state.responsiveMode&&n.setState({responsiveMode:e})},n._events=new b(n),n._updateComposedComponentRef=n._updateComposedComponentRef.bind(n),n.state={responsiveMode:Tr()},n}return u(n,t),n.prototype.componentDidMount=function(){this._events.on(this.context.window,"resize",this._onResize),this._onResize()},n.prototype.componentWillUnmount=function(){this._events.dispose()},n.prototype.render=function(){var t=this.state.responsiveMode;return t===Er.unknown?null:o.createElement(e,l({ref:this._updateComposedComponentRef,responsiveMode:t},this.props))},n}(Ir)).contextType=kr,t);return B(e,n)}function Br(e){var t=Er.small;if(e){try{for(;e.innerWidth>Dr[t];)t++}catch(e){t=Tr()}Mr=t}else{if(void 0===xr)throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");t=xr}return t}function Fr(e,t,n,o){return e.addEventListener(t,n,o),function(){return e.removeEventListener(t,n,o)}}!function(e){e[e.top=1]="top",e[e.bottom=-1]="bottom",e[e.left=2]="left",e[e.right=-2]="right"}(wr||(wr={})),function(e){e[e.top=0]="top",e[e.bottom=1]="bottom",e[e.start=2]="start",e[e.end=3]="end"}(Sr||(Sr={}));var Nr,Rr=function(){function e(e,t,n,o){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),void 0===o&&(o=0),this.top=n,this.bottom=o,this.left=e,this.right=t}return Object.defineProperty(e.prototype,"width",{get:function(){return this.right-this.left},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.bottom-this.top},enumerable:!0,configurable:!0}),e.prototype.equals=function(e){return parseFloat(this.top.toFixed(4))===parseFloat(e.top.toFixed(4))&&parseFloat(this.bottom.toFixed(4))===parseFloat(e.bottom.toFixed(4))&&parseFloat(this.left.toFixed(4))===parseFloat(e.left.toFixed(4))&&parseFloat(this.right.toFixed(4))===parseFloat(e.right.toFixed(4))},e}();function Ar(e,t,n){return{targetEdge:e,alignmentEdge:t,isAuto:n}}var Or=((Nr={})[Bo]=Ar(wr.top,wr.left),Nr[Fo]=Ar(wr.top),Nr[No]=Ar(wr.top,wr.right),Nr[Ro]=Ar(wr.top,void 0,!0),Nr[Ao]=Ar(wr.bottom,wr.left),Nr[Oo]=Ar(wr.bottom),Nr[Lo]=Ar(wr.bottom,wr.right),Nr[Ho]=Ar(wr.bottom,void 0,!0),Nr[Wo]=Ar(wr.left,wr.top),Nr[Ko]=Ar(wr.left),Nr[Uo]=Ar(wr.left,wr.bottom),Nr[jo]=Ar(wr.right,wr.top),Nr[zo]=Ar(wr.right),Nr[qo]=Ar(wr.right,wr.bottom),Nr);function Lr(e,t){return!(e.top<t.top)&&(!(e.bottom>t.bottom)&&(!(e.left<t.left)&&!(e.right>t.right)))}function Hr(e,t){var n=[];return e.top<t.top&&n.push(wr.top),e.bottom>t.bottom&&n.push(wr.bottom),e.left<t.left&&n.push(wr.left),e.right>t.right&&n.push(wr.right),n}function Wr(e,t){return e[wr[t]]}function Kr(e,t,n){return e[wr[t]]=n,e}function Ur(e,t){var n=Jr(t);return(Wr(e,n.positiveEdge)+Wr(e,n.negativeEdge))/2}function jr(e,t){return e>0?t:-1*t}function zr(e,t){return jr(e,Wr(t,e))}function qr(e,t,n){return jr(n,Wr(e,n)-Wr(t,n))}function Vr(e,t,n){var o=Wr(e,t)-n;return e=Kr(e,t,n),e=Kr(e,-1*t,Wr(e,-1*t)-o)}function Gr(e,t,n,o){return void 0===o&&(o=0),Vr(e,n,Wr(t,n)+jr(n,o))}function Zr(e,t,n){return zr(n,e)>zr(n,t)}function Yr(e,t,n,o,r,i,s){void 0===r&&(r=0);var a=o.alignmentEdge,u=o.alignTargetEdge,l={elementRectangle:e,targetEdge:o.targetEdge,alignmentEdge:a};i||s||(l=function(e,t,n,o,r){void 0===r&&(r=0);var i=[wr.left,wr.right,wr.bottom,wr.top];Nt()&&(i[0]*=-1,i[1]*=-1);for(var s=e,a=o.targetEdge,u=o.alignmentEdge,l=0;l<4;l++){if(Zr(s,n,a))return{elementRectangle:s,targetEdge:a,alignmentEdge:u};i.splice(i.indexOf(a),1),i.length>0&&(i.indexOf(-1*a)>-1?a*=-1:(u=a,a=i.slice(-1)[0]),s=$r(e,t,{targetEdge:a,alignmentEdge:u},r))}return{elementRectangle:e,targetEdge:o.targetEdge,alignmentEdge:o.alignmentEdge}}(e,t,n,o,r));var c=Hr(e,n);if(u){if(l.alignmentEdge&&c.indexOf(-1*l.alignmentEdge)>-1){var d=function(e,t,n,o){var r=e.alignmentEdge,i=e.targetEdge,s=-1*r;return{elementRectangle:$r(e.elementRectangle,t,{targetEdge:i,alignmentEdge:s},n,o),targetEdge:i,alignmentEdge:s}}(l,t,r,s);if(Lr(d.elementRectangle,n))return d;l=Xr(Hr(d.elementRectangle,n),l,n)}}else l=Xr(c,l,n);return l}function Xr(e,t,n){for(var o=0,r=e;o<r.length;o++){var i=r[o];t.elementRectangle=Gr(t.elementRectangle,n,i)}return t}function Qr(e,t,n){var o=Jr(t).positiveEdge;return Vr(e,o,n-(Ur(e,t)-Wr(e,o)))}function $r(e,t,n,o,r){var i;void 0===o&&(o=0);var s=n.alignmentEdge,a=n.targetEdge,u=r?a:-1*a;(i=r?Gr(e,t,a,o):function(e,t,n,o){void 0===o&&(o=0);var r=jr(-1*n,o);return Vr(e,-1*n,Wr(t,n)+r)}(e,t,a,o),s)?i=Gr(i,t,s):i=Qr(i,u,Ur(t,a));return i}function Jr(e){return e===wr.top||e===wr.bottom?{positiveEdge:wr.left,negativeEdge:wr.right}:{positiveEdge:wr.top,negativeEdge:wr.bottom}}function ei(e,t,n){return n&&Math.abs(qr(e,n,t))>Math.abs(qr(e,n,-1*t))?-1*t:t}function ti(e){return Math.sqrt(e*e*2)}function ni(e,t,n){if(void 0===e&&(e=Ho),n)return{alignmentEdge:n.alignmentEdge,isAuto:n.isAuto,targetEdge:n.targetEdge};var o=l({},Or[e]);return Nt()?(o.alignmentEdge&&o.alignmentEdge%2==0&&(o.alignmentEdge=-1*o.alignmentEdge),void 0!==t?Or[t]:o):o}function oi(e,t,n){var o=Ur(t,e),r=Ur(n,e),i=Jr(e),s=i.positiveEdge,a=i.negativeEdge;return o<=r?s:a}function ri(e,t,n,o,r,i,s){var a=$r(e,t,o,r,s);return Lr(a,n)?{elementRectangle:a,targetEdge:o.targetEdge,alignmentEdge:o.alignmentEdge}:Yr(e,t,n,o,r,i,s)}function ii(e,t,n){var o=-1*e.targetEdge,r=new Rr(0,e.elementRectangle.width,0,e.elementRectangle.height),i={},s=ei(e.elementRectangle,e.alignmentEdge?e.alignmentEdge:Jr(o).positiveEdge,n);return i[wr[o]]=Wr(t,o),i[wr[s]]=qr(t,r,s),{elementPosition:l({},i),closestEdge:oi(e.targetEdge,t,r),targetEdge:o}}function si(e,t){var n=t.targetRectangle,o=Jr(t.targetEdge),r=o.positiveEdge,i=o.negativeEdge,s=Ur(n,t.targetEdge),a=new Rr(e/2,t.elementRectangle.width-e/2,e/2,t.elementRectangle.height-e/2),u=new Rr(0,e,0,e);return Zr(u=Qr(u=Vr(u,-1*t.targetEdge,-e/2),-1*t.targetEdge,s-zr(r,t.elementRectangle)),a,r)?Zr(u,a,i)||(u=Gr(u,a,i)):u=Gr(u,a,r),u}function ai(e){var t=e.getBoundingClientRect();return new Rr(t.left,t.right,t.top,t.bottom)}function ui(e){return new Rr(e.left,e.right,e.top,e.bottom)}function li(e,t,n,o,r){var i=0,s=Or[t],a=r?-1*s.targetEdge:s.targetEdge;return(i=a===wr.top?Wr(e,s.targetEdge)-o.top-n:a===wr.bottom?o.bottom-Wr(e,s.targetEdge)-n:o.bottom-e.top-n)>0?i:o.height}function ci(e,t,n,o){var r=e.gapSpace?e.gapSpace:0,i=function(e,t){var n;if(t){if(t.preventDefault){var o=t;n=new Rr(o.clientX,o.clientX,o.clientY,o.clientY)}else if(t.getBoundingClientRect)n=ai(t);else{var r=t,i=r.left||r.x,s=r.top||r.y,a=r.right||i,u=r.bottom||s;n=new Rr(i,a,s,u)}if(!Lr(n,e))for(var l=0,c=Hr(n,e);l<c.length;l++){var d=c[l];n[wr[d]]=e[wr[d]]}}else n=new Rr(0,0,0,0);return n}(n,e.target),s=function(e,t,n,o,r){return e.isAuto&&(e.alignmentEdge=oi(e.targetEdge,t,n)),e.alignTargetEdge=r,e}(ni(e.directionalHint,e.directionalHintForRTL,o),i,n,e.coverTarget,e.alignTargetEdge),a=ri(ai(t),i,n,s,r,e.directionalHintFixed,e.coverTarget);return l(l({},a),{targetRectangle:i})}function di(e,t,n,o,r){return{elementPosition:function(e,t,n,o,r,i,s){var a={},u=ai(t),l=i?n:-1*n,c=wr[l],d=r||Jr(n).positiveEdge;return s||(d=ei(e,d,o)),a[c]=qr(e,u,l),a[wr[d]]=qr(e,u,d),a}(e.elementRectangle,t,e.targetEdge,n,e.alignmentEdge,o,r),targetEdge:e.targetEdge,alignmentEdge:e.alignmentEdge}}function pi(e,t,n,o,r){var i=e.isBeakVisible&&e.beakWidth||0,s=ti(i)/2+(e.gapSpace?e.gapSpace:0),a=e;a.gapSpace=s;var u=e.bounds?ui(e.bounds):new Rr(0,window.innerWidth-ar(),0,window.innerHeight),c=ci(a,n,u,o),d=ii(c,si(i,c),u);return l(l({},di(c,t,u,e.coverTarget,r)),{beakPosition:d})}function mi(e,t,n,o){return function(e,t,n,o){return pi(e,t,n,o,!0)}(e,t,n,o)}var hi,fi=function(e){function t(t){var n=e.call(this,t)||this;return n._root=o.createRef(),n._disposables=[],n._onKeyDown=function(e){switch(e.which){case ie:n.props.onDismiss&&(n.props.onDismiss(e),e.preventDefault(),e.stopPropagation())}},n._onFocus=function(){n._containsFocus=!0},n._onBlur=function(e){n._root.current&&e.relatedTarget&&!Yo(n._root.current,e.relatedTarget)&&(n._containsFocus=!1)},n._async=new v(n),n.state={needsVerticalScrollBar:!1},n}return u(t,e),t.prototype.UNSAFE_componentWillMount=function(){this._originalFocusedElement=Tt().activeElement},t.prototype.componentDidMount=function(){if(this._root.current){this._disposables.push(Fr(this._root.current,"focus",this._onFocus,!0),Fr(this._root.current,"blur",this._onBlur,!0));var e=f(this._root.current);e&&this._disposables.push(Fr(e,"keydown",this._onKeyDown)),function(e){var t=Tt(e),n=t&&t.activeElement;return!(!n||!Yo(e,n))}(this._root.current)&&(this._containsFocus=!0)}this._updateScrollBarAsync()},t.prototype.componentDidUpdate=function(){this._updateScrollBarAsync(),this._async.dispose()},t.prototype.componentWillUnmount=function(){var e;if(this._disposables.forEach((function(e){return e()})),this.props.shouldRestoreFocus){var t=this.props.onRestoreFocus;(void 0===t?vi:t)({originalElement:this._originalFocusedElement,containsFocus:this._containsFocus,documentContainsFocus:(null===(e=Tt())||void 0===e?void 0:e.hasFocus())||!1})}delete this._originalFocusedElement},t.prototype.render=function(){var e=this.props,t=e.role,n=e.className,r=e.ariaLabel,i=e.ariaLabelledBy,s=e.ariaDescribedBy,a=e.style;return o.createElement("div",l({ref:this._root},Re(this.props,Ne),{className:n,role:t,"aria-label":r,"aria-labelledby":i,"aria-describedby":s,onKeyDown:this._onKeyDown,style:l({overflowY:this.state.needsVerticalScrollBar?"scroll":void 0,outline:"none"},a)}),this.props.children)},t.prototype._updateScrollBarAsync=function(){var e=this;this._async.requestAnimationFrame((function(){e._getScrollBar()}))},t.prototype._getScrollBar=function(){if(!this.props.style||!this.props.style.overflowY){var e=!1;if(this._root&&this._root.current&&this._root.current.firstElementChild){var t=this._root.current.clientHeight,n=this._root.current.firstElementChild.clientHeight;t>0&&n>t&&(e=n-t>1)}this.state.needsVerticalScrollBar!==e&&this.setState({needsVerticalScrollBar:e})}},t.defaultProps={shouldRestoreFocus:!0},t}(o.Component);function vi(e){var t=e.originalElement,n=e.containsFocus;t&&n&&t!==window&&t.focus&&t.focus()}var gi=((hi={})[wr.top]=Hn.slideUpIn10,hi[wr.bottom]=Hn.slideDownIn10,hi[wr.left]=Hn.slideLeftIn10,hi[wr.right]=Hn.slideRightIn10,hi),_i=Wt({disableCaching:!0}),yi=0,bi=0,Ci={opacity:0,filter:"opacity(0)",pointerEvents:"none"},Ei=["role","aria-roledescription"],Ii=function(e){function t(t){var n=e.call(this,t)||this;return n._hostElement=o.createRef(),n._calloutElement=o.createRef(),n._hasListeners=!1,n._disposables=[],n.dismiss=function(e){var t=n.props.onDismiss;t&&t(e)},n._dismissOnScroll=function(e){var t=n.props,o=t.preventDismissOnEvent,r=t.preventDismissOnScroll;n.state.positions&&(o&&!o(e)||!o&&!r)&&n._dismissOnClickOrScroll(e)},n._dismissOnResize=function(e){var t=n.props,o=t.preventDismissOnEvent,r=t.preventDismissOnResize;(o&&!o(e)||!o&&!r)&&n.dismiss(e)},n._dismissOnLostFocus=function(e){var t=n.props,o=t.preventDismissOnEvent,r=t.preventDismissOnLostFocus;(o&&!o(e)||!o&&!r)&&n._dismissOnClickOrScroll(e)},n._setInitialFocus=function(){n.props.setInitialFocus&&!n._didSetInitialFocus&&n.state.positions&&n._calloutElement.current&&(n._didSetInitialFocus=!0,n._async.requestAnimationFrame((function(){return Xo(n._calloutElement.current)}),n._calloutElement.current))},n._onComponentDidMount=function(){n._addListeners(),n.props.onLayerMounted&&n.props.onLayerMounted(),n._updateAsyncPosition(),n._setHeightOffsetEveryFrame()},n._dismissOnTargetWindowBlur=function(e){var t=n.props,o=t.preventDismissOnEvent,r=t.preventDismissOnLostFocus;t.shouldDismissOnWindowFocus&&((!o||o(e))&&(o||r)||n._targetWindow.document.hasFocus()||null!==e.relatedTarget||n.dismiss(e))},n._mouseDownOnPopup=function(){n._isMouseDownOnPopup=!0},n._mouseUpOnPopup=function(){n._isMouseDownOnPopup=!1},n._async=new v(n),n._didSetInitialFocus=!1,n.state={positions:void 0,slideDirectionalClassName:void 0,calloutElementRect:void 0,heightOffset:0},n._positionAttempts=0,n}return u(t,e),t.prototype.componentDidUpdate=function(){this.props.hidden?this._hasListeners&&this._removeListeners():(this._setInitialFocus(),this._hasListeners||this._addListeners(),this._updateAsyncPosition())},t.prototype.shouldComponentUpdate=function(e,t){return!(!e.shouldUpdateWhenHidden&&this.props.hidden&&e.hidden)&&(!g(this.props,e)||!g(this.state,t))},t.prototype.UNSAFE_componentWillMount=function(){this._setTargetWindowAndElement(this._getTarget())},t.prototype.componentWillUnmount=function(){this._async.dispose(),this._disposables.forEach((function(e){return e()}))},t.prototype.UNSAFE_componentWillUpdate=function(e){var t=this._getTarget(e);(t!==this._getTarget()||"string"==typeof t||t instanceof String)&&!this._blockResetHeight&&(this._maxHeight=void 0,this._setTargetWindowAndElement(t)),e.gapSpace===this.props.gapSpace&&this.props.beakWidth===e.beakWidth||(this._maxHeight=void 0),e.finalHeight!==this.props.finalHeight&&this._setHeightOffsetEveryFrame(),this._didPositionPropsChange(e,this.props)&&(this._maxHeight=void 0,this._setTargetWindowAndElement(t),this.setState({positions:void 0}),this._didSetInitialFocus=!1,this._bounds=void 0),this._blockResetHeight=!1},t.prototype.componentDidMount=function(){this.props.hidden||this._onComponentDidMount()},t.prototype.render=function(){if(!this._targetWindow)return null;var e=this.props.target,t=this.props,n=t.styles,r=t.style,i=t.ariaLabel,s=t.ariaDescribedBy,a=t.ariaLabelledBy,u=t.className,c=t.isBeakVisible,d=t.children,p=t.beakWidth,m=t.calloutWidth,h=t.calloutMaxWidth,f=t.calloutMinWidth,v=t.finalHeight,g=t.hideOverflow,_=void 0===g?!!v:g,y=t.backgroundColor,b=t.calloutMaxHeight,C=t.onScroll,E=t.shouldRestoreFocus,I=void 0===E||E;e=this._getTarget();var k=this.state.positions,x=this._getMaxHeight()?this._getMaxHeight()+this.state.heightOffset:void 0,M=b&&x&&b<x?b:x,w=_,S=c&&!!e;this._classNames=_i(n,{theme:this.props.theme,className:u,overflowYHidden:w,calloutWidth:m,positions:k,beakWidth:p,backgroundColor:y,calloutMinWidth:f,calloutMaxWidth:h});var D=l(l(l({},r),{maxHeight:M}),w&&{overflowY:"hidden"}),T=this.props.hidden?{visibility:"hidden"}:void 0;return o.createElement("div",{ref:this._hostElement,className:this._classNames.container,style:T},o.createElement("div",l({},Re(this.props,Ne,Ei),{className:$(this._classNames.root,k&&k.targetEdge&&gi[k.targetEdge]),style:k?k.elementPosition:Ci,tabIndex:-1,ref:this._calloutElement}),S&&o.createElement("div",{className:this._classNames.beak,style:this._getBeakPosition()}),S&&o.createElement("div",{className:this._classNames.beakCurtain}),o.createElement(fi,l({},Re(this.props,Ei),{ariaLabel:i,onRestoreFocus:this.props.onRestoreFocus,ariaDescribedBy:s,ariaLabelledBy:a,className:this._classNames.calloutMain,onDismiss:this.dismiss,onScroll:C,shouldRestoreFocus:I,style:D,onMouseDown:this._mouseDownOnPopup,onMouseUp:this._mouseUpOnPopup}),d)))},t.prototype._dismissOnClickOrScroll=function(e){var t=e.target,n=this._hostElement.current&&!Yo(this._hostElement.current,t);n&&this._isMouseDownOnPopup?this._isMouseDownOnPopup=!1:(!this._target&&n||e.target!==this._targetWindow&&n&&(this._target.stopPropagation||!this._target||this.props.dismissOnTargetClick||t!==this._target&&!Yo(this._target,t)))&&this.dismiss(e)},t.prototype._addListeners=function(){var e=this;this._async.setTimeout((function(){e._disposables.push(Fr(e._targetWindow,"scroll",e._dismissOnScroll,!0),Fr(e._targetWindow,"resize",e._dismissOnResize,!0),Fr(e._targetWindow.document.documentElement,"focus",e._dismissOnLostFocus,!0),Fr(e._targetWindow.document.documentElement,"click",e._dismissOnLostFocus,!0),Fr(e._targetWindow,"blur",e._dismissOnTargetWindowBlur,!0)),e._hasListeners=!0}),0)},t.prototype._removeListeners=function(){this._disposables.forEach((function(e){return e()})),this._disposables=[],this._hasListeners=!1},t.prototype._updateAsyncPosition=function(){var e=this;this._async.requestAnimationFrame((function(){return e._updatePosition()}),this._calloutElement.current)},t.prototype._getBeakPosition=function(){var e=this.state.positions,t=l({},e&&e.beakPosition?e.beakPosition.elementPosition:null);return t.top||t.bottom||t.left||t.right||(t.left=bi,t.top=yi),t},t.prototype._updatePosition=function(){this._setTargetWindowAndElement(this._getTarget());var e=this.state.positions,t=this._hostElement.current,n=this._calloutElement.current,o=!!this.props.target;if(t&&n&&(!o||this._target)){var r=l({},this.props);r.bounds=this._getBounds(),r.target=this._target;var i=this.props.finalHeight?mi(r,t,n,e):function(e,t,n,o){return pi(e,t,n,o)}(r,t,n,e);!e&&i||e&&i&&!this._arePositionsEqual(e,i)&&this._positionAttempts<5?(this._positionAttempts++,this.setState({positions:i})):this._positionAttempts>0&&(this._positionAttempts=0,this.props.onPositioned&&this.props.onPositioned(this.state.positions))}},t.prototype._getBounds=function(){if(!this._bounds){var e=this.props.bounds,t="function"==typeof e?e(this.props.target,this._targetWindow):e;t||(n=this._target,o=this._targetWindow,t={top:(t=function(e,t){var n=void 0;if(t.getWindowSegments&&(n=t.getWindowSegments()),void 0===n||n.length<=1)return{top:0,left:0,right:t.innerWidth,bottom:t.innerHeight,width:t.innerWidth,height:t.innerHeight};var o=0,r=0;if(null!==e&&e.getBoundingClientRect){var i=e.getBoundingClientRect();o=(i.left+i.right)/2,r=(i.top+i.bottom)/2}else null!==e&&(o=e.left||e.x,r=e.top||e.y);for(var s={top:0,left:0,right:0,bottom:0,width:0,height:0},a=0,u=n;a<u.length;a++){var l=u[a];o&&l.left<=o&&l.right>=o&&r&&l.top<=r&&l.bottom>=r&&(s={top:l.top,left:l.left,right:l.right,bottom:l.bottom,width:l.width,height:l.height})}return s}(n,o)).top+this.props.minPagePadding,left:t.left+this.props.minPagePadding,right:t.right-this.props.minPagePadding,bottom:t.bottom-this.props.minPagePadding,width:t.width-2*this.props.minPagePadding,height:t.height-2*this.props.minPagePadding}),this._bounds=t}var n,o;return this._bounds},t.prototype._getMaxHeight=function(){var e=this;if(!this._maxHeight)if(this.props.directionalHintFixed&&this._target){var t=this.props.isBeakVisible?this.props.beakWidth:0,n=(this.props.gapSpace?this.props.gapSpace:0)+t;this._async.requestAnimationFrame((function(){e._target&&(e._maxHeight=function(e,t,n,o,r){void 0===n&&(n=0);var i=e,s=e,a=e,u=o?ui(o):new Rr(0,window.innerWidth-ar(),0,window.innerHeight),l=a.left||a.x,c=a.top||a.y,d=a.right||l,p=a.bottom||c;return li(i.stopPropagation?new Rr(i.clientX,i.clientX,i.clientY,i.clientY):void 0!==l&&void 0!==c?new Rr(l,d,c,p):ai(s),t,n,u,r)}(e._target,e.props.directionalHint,n,e._getBounds(),e.props.coverTarget),e._blockResetHeight=!0,e.forceUpdate())}),this._target)}else this._maxHeight=this._getBounds().height;return this._maxHeight},t.prototype._arePositionsEqual=function(e,t){return this._comparePositions(e.elementPosition,t.elementPosition)&&this._comparePositions(e.beakPosition.elementPosition,t.beakPosition.elementPosition)},t.prototype._comparePositions=function(e,t){for(var n in t)if(t.hasOwnProperty(n)){var o=e[n],r=t[n];if(void 0===o||void 0===r)return!1;if(o.toFixed(2)!==r.toFixed(2))return!1}return!0},t.prototype._setTargetWindowAndElement=function(e){var t=this._calloutElement.current;if(e)if("string"==typeof e){var n=Tt(t);this._target=n?n.querySelector(e):null,this._targetWindow=f(t)}else if(e.stopPropagation)this._targetWindow=f(e.target),this._target=e;else if(e.getBoundingClientRect){var o=e;this._targetWindow=f(o),this._target=o}else void 0!==e.current?(this._target=e.current,this._targetWindow=f(this._target)):(this._targetWindow=f(t),this._target=e);else this._targetWindow=f(t)},t.prototype._setHeightOffsetEveryFrame=function(){var e=this;this._calloutElement.current&&this.props.finalHeight&&(this._setHeightOffsetTimer=this._async.requestAnimationFrame((function(){var t=e._calloutElement.current&&e._calloutElement.current.lastChild;if(t){var n=t.scrollHeight-t.offsetHeight;e.setState({heightOffset:e.state.heightOffset+n}),t.offsetHeight<e.props.finalHeight?e._setHeightOffsetEveryFrame():e._async.cancelAnimationFrame(e._setHeightOffsetTimer,e._calloutElement.current)}}),this._calloutElement.current))},t.prototype._didPositionPropsChange=function(e,t){return!e.hidden&&e.hidden!==t.hidden||e.directionalHint!==t.directionalHint},t.prototype._getTarget=function(e){return void 0===e&&(e=this.props),e.target},t.defaultProps={preventDismissOnLostFocus:!1,preventDismissOnScroll:!1,preventDismissOnResize:!1,isBeakVisible:!0,beakWidth:16,gapSpace:0,minPagePadding:8,directionalHint:Ho},t}(o.Component);function ki(e){return{height:e,width:e}}var xi={container:"ms-Callout-container",root:"ms-Callout",beak:"ms-Callout-beak",beakCurtain:"ms-Callout-beakCurtain",calloutMain:"ms-Callout-main"},Mi=et(Ii,(function(e){var t,n=e.theme,o=e.className,r=e.overflowYHidden,i=e.calloutWidth,s=e.beakWidth,a=e.backgroundColor,u=e.calloutMaxWidth,l=e.calloutMinWidth,c=Gn(xi,n),d=n.semanticColors,p=n.effects;return{container:[c.container,{position:"relative"}],root:[c.root,n.fonts.medium,{position:"absolute",boxSizing:"border-box",borderRadius:p.roundedCorner2,boxShadow:p.elevation16,selectors:(t={},t[Kn]={borderWidth:1,borderStyle:"solid",borderColor:"WindowText"},t)},{selectors:{"&::-moz-focus-inner":{border:0},"&":{outline:"transparent"}}},o,!!i&&{width:i},!!u&&{maxWidth:u},!!l&&{minWidth:l}],beak:[c.beak,{position:"absolute",backgroundColor:d.menuBackground,boxShadow:"inherit",border:"inherit",boxSizing:"border-box",transform:"rotate(45deg)"},ki(s),a&&{backgroundColor:a}],beakCurtain:[c.beakCurtain,{position:"absolute",top:0,right:0,bottom:0,left:0,backgroundColor:d.menuBackground,borderRadius:p.roundedCorner2}],calloutMain:[c.calloutMain,{backgroundColor:d.menuBackground,overflowX:"hidden",overflowY:"auto",position:"relative",borderRadius:p.roundedCorner2},r&&{overflowY:"hidden"},a&&{backgroundColor:a}]}}),void 0,{scope:"CalloutContent"});function wi(e,t){return void 0===e&&(e={}),(Di(t)?t:function(e){return function(t){return e?l(l({},t),e):t}}(t))(e)}function Si(e,t){return void 0===e&&(e={}),(Di(t)?t:function(e){void 0===e&&(e={});return function(t){var n=l({},t);for(var o in e)e.hasOwnProperty(o)&&(n[o]=l(l({},t[o]),e[o]));return n}}(t))(e)}function Di(e){return"function"==typeof e}var Ti=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._onCustomizationChange=function(){return t.forceUpdate()},t}return u(t,e),t.prototype.componentDidMount=function(){P.observe(this._onCustomizationChange)},t.prototype.componentWillUnmount=function(){P.unobserve(this._onCustomizationChange)},t.prototype.render=function(){var e=this,t=this.props.contextTransform;return o.createElement(F.Consumer,null,(function(n){var r=function(e,t){var n=(t||{}).customizations,o=void 0===n?{settings:{},scopedSettings:{}}:n;return{customizations:{settings:wi(o.settings,e.settings),scopedSettings:Si(o.scopedSettings,e.scopedSettings),inCustomizerContext:!0}}}(e.props,n);return t&&(r=t(r)),o.createElement(F.Provider,{value:r},e.props.children)}))},t}(o.Component),Pi=Wt(),Bi=Y((function(e,t){return vo(l(l({},e),{rtl:t}))})),Fi=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._rootElement=o.createRef(),t._removeClassNameFromBody=void 0,t}return u(t,e),t.prototype.render=function(){var e=this.props,t=e.as,n=void 0===t?"div":t,r=e.theme,i=e.dir,s=this._getClassNames(),a=Re(this.props,Ne,["dir"]),u=function(e,t){var n=Nt(e)?"rtl":"ltr",o=Nt()?"rtl":"ltr",r=t||n;return{rootDir:r!==n||r!==o?r:t,needsTheme:r!==n}}(r,i),c=u.rootDir,d=u.needsTheme,p=o.createElement(n,l({dir:c},a,{className:s.root,ref:this._rootElement}));return d&&(p=o.createElement(Ti,{settings:{theme:Bi(r,"rtl"===i)}},p)),o.createElement(o.Fragment,null,p,o.createElement(Ke,{rootRef:this._rootElement}))},t.prototype.componentDidMount=function(){this._addClassNameToBody()},t.prototype.componentWillUnmount=function(){this._removeClassNameFromBody&&this._removeClassNameFromBody()},t.prototype._getClassNames=function(){var e=this.props,t=e.className,n=e.theme,o=e.applyTheme,r=e.styles;return Pi(r,{theme:n,applyTheme:o,className:t})},t.prototype._addClassNameToBody=function(){if(this.props.applyThemeToBody){var e=this._getClassNames(),t=Tt(this._rootElement.current);t&&(t.body.classList.add(e.bodyThemed),this._removeClassNameFromBody=function(){t.body.classList.remove(e.bodyThemed)})}},t}(o.Component),Ni={fontFamily:"inherit"},Ri={root:"ms-Fabric",bodyThemed:"ms-Fabric-bodyThemed"},Ai=et(Fi,(function(e){var t=e.theme,n=e.className,o=e.applyTheme;return{root:[Gn(Ri,t).root,t.fonts.medium,{color:t.palette.neutralPrimary,selectors:{"& button":Ni,"& input":Ni,"& textarea":Ni}},o&&{color:t.semanticColors.bodyText,backgroundColor:t.semanticColors.bodyBackground},n],bodyThemed:[{backgroundColor:t.semanticColors.bodyBackground}]}}),void 0,{scope:"Fabric"});function Oi(e,t){var n=e,o=t;n._virtual||(n._virtual={children:[]});var r=n._virtual.parent;if(r&&r!==t){var i=r._virtual.children.indexOf(n);i>-1&&r._virtual.children.splice(i,1)}n._virtual.parent=o||void 0,o&&(o._virtual||(o._virtual={children:[]}),o._virtual.children.push(n))}var Li,Hi={};var Wi,Ki=Wt(),Ui=function(e){function t(t){var n=e.call(this,t)||this;return n._rootRef=o.createRef(),n._createLayerElement=function(){var e=n.props.hostId,t=Tt(n._rootRef.current),o=n._getHost();if(t&&o){n._removeLayerElement();var r=t.createElement("div"),i=n._getClassNames();r.className=i.root,r.setAttribute("data-portal-element","true"),Oi(r,n._rootRef.current),n.props.insertFirst?o.insertBefore(r,o.firstChild):o.appendChild(r),n.setState({hostId:e,layerElement:r},(function(){var e=n.props,t=e.onLayerDidMount,o=e.onLayerMounted;o&&o(),t&&t()}))}},n.state={},n}return u(t,e),t.prototype.componentDidMount=function(){var e=this.props.hostId;this._createLayerElement(),e&&function(e,t){Hi[e]||(Hi[e]=[]),Hi[e].push(t)}(e,this._createLayerElement)},t.prototype.render=function(){var e=this.state.layerElement,t=this._getClassNames(),n=this.props.eventBubblingEnabled;return o.createElement("span",{className:"ms-layer",ref:this._rootRef},e&&i.createPortal(o.createElement(Ai,l({},!n&&function(){Wi||(Wi={},["onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOver","onMouseOut","onMouseUp","onTouchMove","onTouchStart","onTouchCancel","onTouchEnd","onKeyDown","onKeyPress","onKeyUp","onFocus","onBlur","onChange","onInput","onInvalid","onSubmit"].forEach((function(e){return Wi[e]=ji})));return Wi}(),{className:t.content}),this.props.children),e))},t.prototype.componentDidUpdate=function(){this.props.hostId!==this.state.hostId&&this._createLayerElement()},t.prototype.componentWillUnmount=function(){var e=this.props.hostId;this._removeLayerElement(),e&&function(e,t){if(Hi[e]){var n=Hi[e].indexOf(t);n>=0&&(Hi[e].splice(n,1),0===Hi[e].length&&delete Hi[e])}}(e,this._createLayerElement)},t.prototype._removeLayerElement=function(){var e=this.props.onLayerWillUnmount,t=this.state.layerElement;if(t&&Oi(t,null),e&&e(),t&&t.parentNode){var n=t.parentNode;n&&n.removeChild(t)}},t.prototype._getClassNames=function(){var e=this.props,t=e.className,n=e.styles,o=e.theme;return Ki(n,{theme:o,className:t,isNotHost:!this.props.hostId})},t.prototype._getHost=function(){var e=this.props.hostId,t=Tt(this._rootRef.current);if(t){if(e)return t.getElementById(e);var n=Li;return n?t.querySelector(n):t.body}},t.defaultProps={onLayerDidMount:function(){},onLayerWillUnmount:function(){}},t=d([R("Layer",["theme","hostId"])],t)}(o.Component),ji=function(e){e.eventPhase===Event.BUBBLING_PHASE&&"mouseenter"!==e.type&&"mouseleave"!==e.type&&"touchstart"!==e.type&&"touchend"!==e.type&&e.stopPropagation()};var zi,qi={root:"ms-Layer",rootNoHost:"ms-Layer--fixed",content:"ms-Layer-content"},Vi=et(Ui,(function(e){var t=e.className,n=e.isNotHost,o=e.theme,r=Gn(qi,o);return{root:[r.root,o.fonts.medium,n&&[r.rootNoHost,{position:"fixed",zIndex:Wn.Layer,top:0,left:0,bottom:0,right:0,visibility:"hidden"}],t],content:[r.content,{visibility:"visible"}]}}),void 0,{scope:"Layer",fields:["hostId","theme","styles"]}),Gi=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.render=function(){var e=this.props,t=e.layerProps,n=c(e,["layerProps"]),r=o.createElement(Mi,l({},n));return this.props.doNotLayer?r:o.createElement(Vi,l({},t),r)},t}(o.Component),Zi=function(e){var t=e.item,n=e.hasIcons,r=e.classNames,i=t.iconProps;return n?t.onRenderIcon?t.onRenderIcon(e):o.createElement(Do,l({},i,{className:r.icon})):null},Yi=function(e){var t=e.onCheckmarkClick,n=e.item,r=e.classNames,i=gr(n);if(t){return o.createElement(Do,{iconName:!1!==n.canCheck&&i?"CheckMark":"",className:r.checkmarkIcon,onClick:function(e){return t(n,e)}})}return null},Xi=function(e){var t=e.item,n=e.classNames;return t.text||t.name?o.createElement("span",{className:n.label},t.text||t.name):null},Qi=function(e){var t=e.item,n=e.classNames;return t.secondaryText?o.createElement("span",{className:n.secondaryText},t.secondaryText):null},$i=function(e){var t=e.item,n=e.classNames,r=e.theme;return _r(t)?o.createElement(Do,l({iconName:Nt(r)?"ChevronLeft":"ChevronRight"},t.submenuIconProps,{className:n.subMenuIcon})):null},Ji=function(e){function t(t){var n=e.call(this,t)||this;return n.openSubMenu=function(){var e=n.props,t=e.item,o=e.openSubMenu,r=e.getSubmenuTarget;if(r){var i=r();_r(t)&&o&&i&&o(t,i)}},n.dismissSubMenu=function(){var e=n.props,t=e.item,o=e.dismissSubMenu;_r(t)&&o&&o()},n.dismissMenu=function(e){var t=n.props.dismissMenu;t&&t(void 0,e)},ve(n),n}return u(t,e),t.prototype.render=function(){var e=this.props,t=e.item,n=e.classNames,r=t.onRenderContent||this._renderLayout;return o.createElement("div",{className:t.split?n.linkContentMenu:n.linkContent},r(this.props,{renderCheckMarkIcon:Yi,renderItemIcon:Zi,renderItemName:Xi,renderSecondaryText:Qi,renderSubMenuIcon:$i}))},t.prototype._renderLayout=function(e,t){return o.createElement(o.Fragment,null,t.renderCheckMarkIcon(e),t.renderItemIcon(e),t.renderItemName(e),t.renderSecondaryText(e),t.renderSubMenuIcon(e))},t}(o.Component),es=Y((function(e){return St({wrapper:{display:"inline-flex",height:"100%",alignItems:"center"},divider:{width:1,height:"100%",backgroundColor:e.palette.neutralTertiaryAlt}})})),ts=Un(0,639),ns=Y((function(){var e;return{selectors:(e={},e[Kn]=l({backgroundColor:"Highlight",borderColor:"Highlight",color:"HighlightText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),e)}})),os=Y((function(e){var t,n,o,r,i,s,a,u=e.semanticColors,c=e.fonts,d=e.palette,p=u.menuItemBackgroundHovered,m=u.menuItemTextHovered,h=u.menuItemBackgroundPressed,f=u.bodyDivider;return N({item:[c.medium,{color:u.bodyText,position:"relative",boxSizing:"border-box"}],divider:{display:"block",height:"1px",backgroundColor:f,position:"relative"},root:[jn(e),c.medium,{color:u.bodyText,backgroundColor:"transparent",border:"none",width:"100%",height:36,lineHeight:36,display:"block",cursor:"pointer",padding:"0px 8px 0 4px",textAlign:"left"}],rootDisabled:{color:u.disabledBodyText,cursor:"default",pointerEvents:"none",selectors:(t={},t[Kn]=l({color:"GrayText",opacity:1},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),t)},rootHovered:l({backgroundColor:p,color:m,selectors:{".ms-ContextualMenu-icon":{color:d.themeDarkAlt},".ms-ContextualMenu-submenuIcon":{color:d.neutralPrimary}}},ns()),rootFocused:l({backgroundColor:d.white},ns()),rootChecked:l({selectors:{".ms-ContextualMenu-checkmarkIcon":{color:d.neutralPrimary}}},ns()),rootPressed:l({backgroundColor:h,selectors:{".ms-ContextualMenu-icon":{color:d.themeDark},".ms-ContextualMenu-submenuIcon":{color:d.neutralPrimary}}},ns()),rootExpanded:l({backgroundColor:h,color:u.bodyTextChecked},ns()),linkContent:{whiteSpace:"nowrap",height:"inherit",display:"flex",alignItems:"center",maxWidth:"100%"},anchorLink:{padding:"0px 8px 0 4px",textRendering:"auto",color:"inherit",letterSpacing:"normal",wordSpacing:"normal",textTransform:"none",textIndent:"0px",textShadow:"none",textDecoration:"none",boxSizing:"border-box"},label:{margin:"0 4px",verticalAlign:"middle",display:"inline-block",flexGrow:"1",textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"},secondaryText:{color:e.palette.neutralSecondary,paddingLeft:"20px",textAlign:"right"},icon:{display:"inline-block",minHeight:"1px",maxHeight:36,fontSize:Ln.medium,width:Ln.medium,margin:"0 4px",verticalAlign:"middle",flexShrink:"0",selectors:(n={},n[ts]={fontSize:Ln.large,width:Ln.large},n)},iconColor:{color:u.menuIcon,selectors:(o={},o[Kn]={color:"inherit"},o["$root:hover &"]={selectors:(r={},r[Kn]={color:"HighlightText"},r)},o["$root:focus &"]={selectors:(i={},i[Kn]={color:"HighlightText"},i)},o)},iconDisabled:{color:u.disabledBodyText},checkmarkIcon:{color:u.bodySubtext,selectors:(s={},s[Kn]={color:"HighlightText"},s)},subMenuIcon:{height:36,lineHeight:36,color:d.neutralSecondary,textAlign:"center",display:"inline-block",verticalAlign:"middle",flexShrink:"0",fontSize:Ln.small,selectors:(a={":hover":{color:d.neutralPrimary},":active":{color:d.neutralPrimary}},a[ts]={fontSize:Ln.medium},a[Kn]={color:"HighlightText"},a)},splitButtonFlexContainer:[jn(e),{display:"flex",height:36,flexWrap:"nowrap",justifyContent:"center",alignItems:"flex-start"}]})})),rs=Un(0,639),is=Y((function(e){var t;return St(es(e),{wrapper:{position:"absolute",right:28,selectors:(t={},t[rs]={right:32},t)},divider:{height:16,width:1}})})),ss={item:"ms-ContextualMenu-item",divider:"ms-ContextualMenu-divider",root:"ms-ContextualMenu-link",isChecked:"is-checked",isExpanded:"is-expanded",isDisabled:"is-disabled",linkContent:"ms-ContextualMenu-linkContent",linkContentMenu:"ms-ContextualMenu-linkContent",icon:"ms-ContextualMenu-icon",iconColor:"ms-ContextualMenu-iconColor",checkmarkIcon:"ms-ContextualMenu-checkmarkIcon",subMenuIcon:"ms-ContextualMenu-submenuIcon",label:"ms-ContextualMenu-itemText",secondaryText:"ms-ContextualMenu-secondaryText",splitMenu:"ms-ContextualMenu-splitMenu",screenReaderText:"ms-ContextualMenu-screenReaderText"},as=Y((function(e,t,n,o,r,i,s,a,u,l,c,d){var p,m,h,f,v=os(e),g=Gn(ss,e);return St({item:[g.item,v.item,s],divider:[g.divider,v.divider,a],root:[g.root,v.root,o&&[g.isChecked,v.rootChecked],r&&v.anchorLink,n&&[g.isExpanded,v.rootExpanded],t&&[g.isDisabled,v.rootDisabled],!t&&!n&&[{selectors:(p={":hover":v.rootHovered,":active":v.rootPressed},p[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=v.rootFocused,p[".ms-Fabric--isFocusVisible &:hover"]={background:"inherit;"},p)}],d],splitPrimary:[v.root,{width:"calc(100% - 28px)"},o&&["is-checked",v.rootChecked],(t||c)&&["is-disabled",v.rootDisabled],!(t||c)&&!o&&[{selectors:(m={":hover":v.rootHovered},m[":hover ~ ."+g.splitMenu]=v.rootHovered,m[":active"]=v.rootPressed,m[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=v.rootFocused,m[".ms-Fabric--isFocusVisible &:hover"]={background:"inherit;"},m)}]],splitMenu:[g.splitMenu,v.root,{flexBasis:"0",padding:"0 8px",minWidth:"28px"},n&&["is-expanded",v.rootExpanded],t&&["is-disabled",v.rootDisabled],!t&&!n&&[{selectors:(h={":hover":v.rootHovered,":active":v.rootPressed},h[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=v.rootFocused,h[".ms-Fabric--isFocusVisible &:hover"]={background:"inherit;"},h)}]],anchorLink:v.anchorLink,linkContent:[g.linkContent,v.linkContent],linkContentMenu:[g.linkContentMenu,v.linkContent,{justifyContent:"center"}],icon:[g.icon,i&&v.iconColor,v.icon,u,t&&[g.isDisabled,v.iconDisabled]],iconColor:v.iconColor,checkmarkIcon:[g.checkmarkIcon,i&&v.checkmarkIcon,v.icon,u],subMenuIcon:[g.subMenuIcon,v.subMenuIcon,l,n&&{color:e.palette.neutralPrimary},t&&[v.iconDisabled]],label:[g.label,v.label],secondaryText:[g.secondaryText,v.secondaryText],splitContainer:[v.splitButtonFlexContainer,!t&&!o&&[{selectors:(f={},f[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=v.rootFocused,f)}]],screenReaderText:[g.screenReaderText,v.screenReaderText,qn,{visibility:"hidden"}]})})),us=function(e){var t=e.theme,n=e.disabled,o=e.expanded,r=e.checked,i=e.isAnchorLink,s=e.knownIcon,a=e.itemClassName,u=e.dividerClassName,l=e.iconClassName,c=e.subMenuClassName,d=e.primaryDisabled,p=e.className;return as(t,n,o,r,i,s,a,u,l,c,d,p)},ls=et(Ji,us,void 0,{scope:"ContextualMenuItem"}),cs=function(e){function t(t){var n=e.call(this,t)||this;return n._onItemMouseEnter=function(e){var t=n.props,o=t.item,r=t.onItemMouseEnter;r&&r(o,e,e.currentTarget)},n._onItemClick=function(e){var t=n.props,o=t.item,r=t.onItemClickBase;r&&r(o,e,e.currentTarget)},n._onItemMouseLeave=function(e){var t=n.props,o=t.item,r=t.onItemMouseLeave;r&&r(o,e)},n._onItemKeyDown=function(e){var t=n.props,o=t.item,r=t.onItemKeyDown;r&&r(o,e)},n._onItemMouseMove=function(e){var t=n.props,o=t.item,r=t.onItemMouseMove;r&&r(o,e,e.currentTarget)},n._getSubMenuId=function(e){var t=n.props.getSubMenuId;if(t)return t(e)},n._getSubmenuTarget=function(){},ve(n),n}return u(t,e),t.prototype.shouldComponentUpdate=function(e){return!g(e,this.props)},t}(o.Component);!function(e){e.KEYTIP_ADDED="keytipAdded",e.KEYTIP_REMOVED="keytipRemoved",e.KEYTIP_UPDATED="keytipUpdated",e.PERSISTED_KEYTIP_ADDED="persistedKeytipAdded",e.PERSISTED_KEYTIP_REMOVED="persistedKeytipRemoved",e.PERSISTED_KEYTIP_EXECUTE="persistedKeytipExecute",e.ENTER_KEYTIP_MODE="enterKeytipMode",e.EXIT_KEYTIP_MODE="exitKeytipMode"}(zi||(zi={}));var ds=function(){function e(){this.keytips={},this.persistedKeytips={},this.sequenceMapping={},this.inKeytipMode=!1,this.shouldEnterKeytipMode=!0,this.delayUpdatingKeytipChange=!1}return e.getInstance=function(){return this._instance},e.prototype.init=function(e){this.delayUpdatingKeytipChange=e},e.prototype.register=function(e,t){void 0===t&&(t=!1);var n=e;t||(n=this.addParentOverflow(e),this.sequenceMapping[n.keySequences.toString()]=n);var o=this._getUniqueKtp(n);if(t?this.persistedKeytips[o.uniqueID]=o:this.keytips[o.uniqueID]=o,this.inKeytipMode||!this.delayUpdatingKeytipChange){var r=t?zi.PERSISTED_KEYTIP_ADDED:zi.KEYTIP_ADDED;b.raise(this,r,{keytip:n,uniqueID:o.uniqueID})}return o.uniqueID},e.prototype.update=function(e,t){var n=this.addParentOverflow(e),o=this._getUniqueKtp(n,t),r=this.keytips[t];r&&(o.keytip.visible=r.keytip.visible,this.keytips[t]=o,delete this.sequenceMapping[r.keytip.keySequences.toString()],this.sequenceMapping[o.keytip.keySequences.toString()]=o.keytip,!this.inKeytipMode&&this.delayUpdatingKeytipChange||b.raise(this,zi.KEYTIP_UPDATED,{keytip:o.keytip,uniqueID:o.uniqueID}))},e.prototype.unregister=function(e,t,n){void 0===n&&(n=!1),n?delete this.persistedKeytips[t]:delete this.keytips[t],!n&&delete this.sequenceMapping[e.keySequences.toString()];var o=n?zi.PERSISTED_KEYTIP_REMOVED:zi.KEYTIP_REMOVED;!this.inKeytipMode&&this.delayUpdatingKeytipChange||b.raise(this,o,{keytip:e,uniqueID:t})},e.prototype.enterKeytipMode=function(){b.raise(this,zi.ENTER_KEYTIP_MODE)},e.prototype.exitKeytipMode=function(){b.raise(this,zi.EXIT_KEYTIP_MODE)},e.prototype.getKeytips=function(){var e=this;return Object.keys(this.keytips).map((function(t){return e.keytips[t].keytip}))},e.prototype.addParentOverflow=function(e){var t=p(e.keySequences);if(t.pop(),0!==t.length){var n=this.sequenceMapping[t.toString()];if(n&&n.overflowSetSequence)return l(l({},e),{overflowSetSequence:n.overflowSetSequence})}return e},e.prototype.menuExecute=function(e,t){b.raise(this,zi.PERSISTED_KEYTIP_EXECUTE,{overflowButtonSequences:e,keytipSequences:t})},e.prototype._getUniqueKtp=function(e,t){return void 0===t&&(t=Ie()),{keytip:l({},e),uniqueID:t}},e._instance=new e,e}();function ps(e){return e.reduce((function(e,t){return e+"-"+t.split("").join("-")}),"ktp")}function ms(e){var t,n,r=o.useRef(),i=e.keytipProps?l({disabled:e.disabled},e.keytipProps):void 0,s=(t=ds.getInstance(),void 0===(n=o.useRef()).current&&(n.current={value:"function"==typeof t?t():t}),n.current.value),a=function(e){var t=Object(o.useRef)();return Object(o.useEffect)((function(){t.current=e})),t.current}(e);o.useLayoutEffect((function(){var t,n;r.current&&i&&((null===(t=a)||void 0===t?void 0:t.keytipProps)!==e.keytipProps||(null===(n=a)||void 0===n?void 0:n.disabled)!==e.disabled)&&s.update(i,r.current)})),o.useLayoutEffect((function(){return i&&(r.current=s.register(i)),function(){i&&s.unregister(i,r.current)}}),[]);var u={ariaDescribedBy:void 0,keytipId:void 0};return i&&(u=function(e,t,n){var o=e.addParentOverflow(t),r=qe(n,function(e){return e.length?" ktp-layer-id "+ps(e):" ktp-layer-id"}(o.keySequences)),i=p(o.keySequences);o.overflowSetSequence&&(i=function(e,t){var n,o,r,i=t.length,s=p(t).pop(),a=p(e);return n=i-1,o=s,(r=a.slice()).splice(n,0,o),r}(i,o.overflowSetSequence));var s=ps(i);return{ariaDescribedBy:r,keytipId:s}}(s,i,e.ariaDescribedBy)),u}var hs=function(e){var t,n=e.children,o=ms(c(e,["children"])),r=o.keytipId,i=o.ariaDescribedBy;return n(((t={})["data-ktp-target"]=r,t["data-ktp-execute-target"]=r,t["aria-describedby"]=i,t))},fs=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._anchor=o.createRef(),t._getMemoizedMenuButtonKeytipProps=Y((function(e){return l(l({},e),{hasMenu:!0})})),t._getSubmenuTarget=function(){return t._anchor.current?t._anchor.current:void 0},t._onItemClick=function(e){var n=t.props,o=n.item,r=n.onItemClick;r&&r(o,e)},t._renderAriaDescription=function(e,n){return e?o.createElement("span",{id:t._ariaDescriptionId,className:n},e):null},t}return u(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.item,r=t.classNames,i=t.index,s=t.focusableElementIndex,a=t.totalItemCount,u=t.hasCheckmarks,c=t.hasIcons,d=t.contextualMenuItemAs,p=void 0===d?ls:d,m=t.expandedMenuItemKey,h=t.onItemClick,f=t.openSubMenu,v=t.dismissSubMenu,g=t.dismissMenu,_=n.rel;n.target&&"_blank"===n.target.toLowerCase()&&(_=_||"nofollow noopener noreferrer");var y=this._getSubMenuId(n),b=_r(n),C=Re(n,Pe),E=yr(n),I=n.itemProps,k=n.ariaDescription,x=n.keytipProps;return x&&b&&(x=this._getMemoizedMenuButtonKeytipProps(x)),k&&(this._ariaDescriptionId=Ie()),o.createElement("div",null,o.createElement(hs,{keytipProps:n.keytipProps,ariaDescribedBy:C["aria-describedby"],disabled:E},(function(t){return o.createElement("a",l({},C,t,{ref:e._anchor,href:n.href,target:n.target,rel:_,className:r.root,role:"menuitem","aria-owns":n.key===m?y:void 0,"aria-haspopup":b||void 0,"aria-expanded":b?n.key===m:void 0,"aria-posinset":s+1,"aria-setsize":a,"aria-disabled":yr(n),"aria-describedby":qe(k?e._ariaDescriptionId:void 0,t?t["aria-describedby"]:void 0),style:n.style,onClick:e._onItemClick,onMouseEnter:e._onItemMouseEnter,onMouseLeave:e._onItemMouseLeave,onMouseMove:e._onItemMouseMove,onKeyDown:b?e._onItemKeyDown:void 0}),o.createElement(p,l({componentRef:n.componentRef,item:n,classNames:r,index:i,onCheckmarkClick:u&&h?h:void 0,hasIcons:c,openSubMenu:f,dismissSubMenu:v,dismissMenu:g,getSubmenuTarget:e._getSubmenuTarget},I)),e._renderAriaDescription(k,r.screenReaderText))})))},t}(cs),vs=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._btn=o.createRef(),t._getMemoizedMenuButtonKeytipProps=Y((function(e){return l(l({},e),{hasMenu:!0})})),t._renderAriaDescription=function(e,n){return e?o.createElement("span",{id:t._ariaDescriptionId,className:n},e):null},t._getSubmenuTarget=function(){return t._btn.current?t._btn.current:void 0},t}return u(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.item,r=t.classNames,i=t.index,s=t.focusableElementIndex,a=t.totalItemCount,u=t.hasCheckmarks,c=t.hasIcons,d=t.contextualMenuItemAs,p=void 0===d?ls:d,m=t.expandedMenuItemKey,h=t.onItemMouseDown,f=t.onItemClick,v=t.openSubMenu,g=t.dismissSubMenu,_=t.dismissMenu,y=this._getSubMenuId(n),b=gr(n),C=null!==b,E=br(n),I=_r(n),k=n.itemProps,x=n.ariaLabel,M=n.ariaDescription,w=Re(n,Be);delete w.disabled;var S=n.role||E;M&&(this._ariaDescriptionId=Ie());var D=M?this._ariaDescriptionId:void 0,T={className:r.root,onClick:this._onItemClick,onKeyDown:I?this._onItemKeyDown:void 0,onMouseEnter:this._onItemMouseEnter,onMouseLeave:this._onItemMouseLeave,onMouseDown:function(e){return h?h(n,e):void 0},onMouseMove:this._onItemMouseMove,href:n.href,title:n.title,"aria-label":x,"aria-describedby":D,"aria-haspopup":I||void 0,"aria-owns":n.key===m?y:void 0,"aria-expanded":I?n.key===m:void 0,"aria-posinset":s+1,"aria-setsize":a,"aria-disabled":yr(n),"aria-checked":"menuitemcheckbox"!==S&&"menuitemradio"!==S||!C?void 0:!!b,"aria-selected":"menuitem"===S&&C?!!b:void 0,role:S,style:n.style},P=n.keytipProps;return P&&I&&(P=this._getMemoizedMenuButtonKeytipProps(P)),o.createElement(hs,{keytipProps:P,ariaDescribedBy:w["aria-describedby"],disabled:yr(n)},(function(t){return o.createElement("button",l({ref:e._btn},w,T,t,{"aria-describedby":qe(T["aria-describedby"],t?t["aria-describedby"]:void 0)}),o.createElement(p,l({componentRef:n.componentRef,item:n,classNames:r,index:i,onCheckmarkClick:u&&f?f:void 0,hasIcons:c,openSubMenu:v,dismissSubMenu:g,dismissMenu:_,getSubmenuTarget:e._getSubmenuTarget},k)),e._renderAriaDescription(M,r.screenReaderText))}))},t}(cs),gs=Wt(),_s=function(e){var t=e.styles,n=e.theme,r=e.getClassNames,i=e.className,s=gs(t,{theme:n,getClassNames:r,className:i});return o.createElement("span",{className:s.wrapper},o.createElement("span",{className:s.divider}))};_s.displayName="VerticalDividerBase";var ys=et(_s,(function(e){var t=e.theme,n=e.getClassNames,o=e.className;if(!t)throw new Error("Theme is undefined or null.");if(n){var r=n(t);return{wrapper:[r.wrapper],divider:[r.divider]}}return{wrapper:[{display:"inline-flex",height:"100%",alignItems:"center"},o],divider:[{width:1,height:"100%",backgroundColor:t.palette.neutralTertiaryAlt}]}}),void 0,{scope:"VerticalDivider"}),bs=function(e){function t(t){var n=e.call(this,t)||this;return n._getMemoizedMenuButtonKeytipProps=Y((function(e){return l(l({},e),{hasMenu:!0})})),n._renderAriaDescription=function(e,t){return e?o.createElement("span",{id:n._ariaDescriptionId,className:t},e):null},n._onItemKeyDown=function(e){var t=n.props,o=t.item,r=t.onItemKeyDown;e.which===oe?(n._executeItemClick(e),e.preventDefault(),e.stopPropagation()):r&&r(o,e)},n._getSubmenuTarget=function(){return n._splitButton},n._onItemMouseEnterPrimary=function(e){var t=n.props,o=t.item,r=t.onItemMouseEnter;r&&r(l(l({},o),{subMenuProps:void 0,items:void 0}),e,n._splitButton)},n._onItemMouseEnterIcon=function(e){var t=n.props,o=t.item,r=t.onItemMouseEnter;r&&r(o,e,n._splitButton)},n._onItemMouseMovePrimary=function(e){var t=n.props,o=t.item,r=t.onItemMouseMove;r&&r(l(l({},o),{subMenuProps:void 0,items:void 0}),e,n._splitButton)},n._onItemMouseMoveIcon=function(e){var t=n.props,o=t.item,r=t.onItemMouseMove;r&&r(o,e,n._splitButton)},n._onIconItemClick=function(e){var t=n.props,o=t.item,r=t.onItemClickBase;r&&r(o,e,n._splitButton?n._splitButton:e.currentTarget)},n._executeItemClick=function(e){var t=n.props,o=t.item,r=t.executeItemClick,i=t.onItemClick;if(!o.disabled&&!o.isDisabled)return n._processingTouch&&i?i(o,e):void(r&&r(o,e))},n._onTouchStart=function(e){!n._splitButton||"onpointerdown"in n._splitButton||n._handleTouchAndPointerEvent(e)},n._onPointerDown=function(e){"touch"===e.pointerType&&(n._handleTouchAndPointerEvent(e),e.preventDefault(),e.stopImmediatePropagation())},n._async=new v(n),n._events=new b(n),n}return u(t,e),t.prototype.componentDidMount=function(){this._splitButton&&"onpointerdown"in this._splitButton&&this._events.on(this._splitButton,"pointerdown",this._onPointerDown,!0)},t.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},t.prototype.render=function(){var e=this,t=this.props,n=t.item,r=t.classNames,i=t.index,s=t.focusableElementIndex,a=t.totalItemCount,u=t.hasCheckmarks,c=t.hasIcons,d=t.onItemMouseLeave,p=t.expandedMenuItemKey,m=_r(n),h=n.keytipProps;h&&(h=this._getMemoizedMenuButtonKeytipProps(h));var f=n.ariaDescription;return f&&(this._ariaDescriptionId=Ie()),o.createElement(hs,{keytipProps:h,disabled:yr(n)},(function(t){return o.createElement("div",{"data-ktp-target":t["data-ktp-target"],ref:function(t){return e._splitButton=t},role:br(n),"aria-label":n.ariaLabel,className:r.splitContainer,"aria-disabled":yr(n),"aria-expanded":m?n.key===p:void 0,"aria-haspopup":!0,"aria-describedby":qe(f?e._ariaDescriptionId:void 0,t["aria-describedby"]),"aria-checked":n.isChecked||n.checked,"aria-posinset":s+1,"aria-setsize":a,onMouseEnter:e._onItemMouseEnterPrimary,onMouseLeave:d?d.bind(e,l(l({},n),{subMenuProps:null,items:null})):void 0,onMouseMove:e._onItemMouseMovePrimary,onKeyDown:e._onItemKeyDown,onClick:e._executeItemClick,onTouchStart:e._onTouchStart,tabIndex:0,"data-is-focusable":!0,"aria-roledescription":n["aria-roledescription"]},e._renderSplitPrimaryButton(n,r,i,u,c),e._renderSplitDivider(n),e._renderSplitIconButton(n,r,i,t),e._renderAriaDescription(f,r.screenReaderText))}))},t.prototype._renderSplitPrimaryButton=function(e,t,n,r,i){var s=this.props,a=s.contextualMenuItemAs,u=void 0===a?ls:a,c=s.onItemClick,d={key:e.key,disabled:yr(e)||e.primaryDisabled,name:e.name,text:e.text||e.name,secondaryText:e.secondaryText,className:t.splitPrimary,canCheck:e.canCheck,isChecked:e.isChecked,checked:e.checked,iconProps:e.iconProps,onRenderIcon:e.onRenderIcon,data:e.data,"data-is-focusable":!1},p=e.itemProps;return o.createElement("button",l({},Re(d,Be)),o.createElement(u,l({"data-is-focusable":!1,item:d,classNames:t,index:n,onCheckmarkClick:r&&c?c:void 0,hasIcons:i},p)))},t.prototype._renderSplitDivider=function(e){var t=e.getSplitButtonVerticalDividerClassNames||is;return o.createElement(ys,{getClassNames:t})},t.prototype._renderSplitIconButton=function(e,t,n,r){var i=this.props,s=i.contextualMenuItemAs,a=void 0===s?ls:s,u=i.onItemMouseLeave,c=i.onItemMouseDown,d=i.openSubMenu,p=i.dismissSubMenu,m=i.dismissMenu,h={onClick:this._onIconItemClick,disabled:yr(e),className:t.splitMenu,subMenuProps:e.subMenuProps,submenuIconProps:e.submenuIconProps,split:!0,key:e.key},f=l(l({},Re(h,Be)),{onMouseEnter:this._onItemMouseEnterIcon,onMouseLeave:u?u.bind(this,e):void 0,onMouseDown:function(t){return c?c(e,t):void 0},onMouseMove:this._onItemMouseMoveIcon,"data-is-focusable":!1,"data-ktp-execute-target":r["data-ktp-execute-target"],"aria-hidden":!0}),v=e.itemProps;return o.createElement("button",l({},f),o.createElement(a,l({componentRef:e.componentRef,item:h,classNames:t,index:n,hasIcons:!1,openSubMenu:d,dismissSubMenu:p,dismissMenu:m,getSubmenuTarget:this._getSubmenuTarget},v)))},t.prototype._handleTouchAndPointerEvent=function(e){var t=this,n=this.props.onTap;n&&n(e),this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout((function(){t._processingTouch=!1,t._lastTouchTimeoutId=void 0}),500)},t}(cs),Cs=Wt(),Es=Wt();function Is(e){return e.subMenuProps?e.subMenuProps.items:e.items}var ks=Y((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return Ye.apply(void 0,p([t,us],e))}})),xs=function(e){function t(t){var n=e.call(this,t)||this;return n._mounted=!1,n.dismiss=function(e,t){var o=n.props.onDismiss;o&&o(e,t)},n._tryFocusPreviousActiveElement=function(e){n.props.onRestoreFocus?n.props.onRestoreFocus(e):e&&e.containsFocus&&n._previousActiveElement&&n._previousActiveElement.focus&&n._previousActiveElement.focus()},n._onRenderMenuList=function(e,t){var r=0,i=e.items,s=e.totalItemCount,a=e.hasCheckmarks,u=e.hasIcons,l=e.role;return o.createElement("ul",{className:n._classNames.list,onKeyDown:n._onKeyDown,onKeyUp:n._onKeyUp,role:null!=l?l:"menu"},i.map((function(e,t){var o=n._renderMenuItem(e,t,r,s,a,u);if(e.itemType!==To.Divider&&e.itemType!==To.Header){var i=e.customOnRenderListLength?e.customOnRenderListLength:1;r+=i}return o})))},n._renderMenuItem=function(e,t,r,i,s,a){var u,l,c=[],d=e.iconProps||{iconName:"None"},p=e.getItemClassNames,m=e.itemProps,h=m?m.styles:void 0,f=e.itemType===To.Divider?e.className:void 0,v=e.submenuIconProps?e.submenuIconProps.className:"";if(p)l=p(n.props.theme,yr(e),n.state.expandedMenuItemKey===e.key,!!gr(e),!!e.href,"None"!==d.iconName,e.className,f,d.className,v,e.primaryDisabled);else{var g={theme:n.props.theme,disabled:yr(e),expanded:n.state.expandedMenuItemKey===e.key,checked:!!gr(e),isAnchorLink:!!e.href,knownIcon:"None"!==d.iconName,itemClassName:e.className,dividerClassName:f,iconClassName:d.className,subMenuClassName:v,primaryDisabled:e.primaryDisabled};l=Es(ks(null===(u=n._classNames.subComponentStyles)||void 0===u?void 0:u.menuItem,h),g)}switch("-"!==e.text&&"-"!==e.name||(e.itemType=To.Divider),e.itemType){case To.Divider:c.push(n._renderSeparator(t,l));break;case To.Header:c.push(n._renderSeparator(t,l));var _=n._renderHeaderMenuItem(e,l,t,s,a);c.push(n._renderListItem(_,e.key||t,l,e.title));break;case To.Section:c.push(n._renderSectionItem(e,l,t,s,a));break;default:var y=n._renderNormalItem(e,l,t,r,i,s,a);c.push(n._renderListItem(y,e.key||t,l,e.title))}return o.createElement(o.Fragment,{key:e.key},c)},n._defaultMenuItemRenderer=function(e){var t=e.index,o=e.focusableElementIndex,r=e.totalItemCount,i=e.hasCheckmarks,s=e.hasIcons;return n._renderMenuItem(e,t,o,r,i,s)},n._onKeyDown=function(e){n._lastKeyDownWasAltOrMeta=n._isAltOrMeta(e);var t=e.which===ie&&(fr()||vr());return n._keyHandler(e,n._shouldHandleKeyDown,t)},n._shouldHandleKeyDown=function(e){return e.which===ie||n._shouldCloseSubMenu(e)||e.which===pe&&(e.altKey||e.metaKey)},n._onMenuFocusCapture=function(e){n.props.delayUpdateFocusOnHover&&(n._shouldUpdateFocusOnMouseEvent=!0)},n._onKeyUp=function(e){return n._keyHandler(e,n._shouldHandleKeyUp,!0)},n._shouldHandleKeyUp=function(e){var t=n._lastKeyDownWasAltOrMeta&&n._isAltOrMeta(e);return n._lastKeyDownWasAltOrMeta=!1,!!t&&!(vr()||fr())},n._keyHandler=function(e,t,o){var r=!1;return t(e)&&(n._focusingPreviousElement=!0,n.dismiss(e,o),e.preventDefault(),e.stopPropagation(),r=!0),r},n._shouldCloseSubMenu=function(e){var t=Nt(n.props.theme)?me:de;return!(e.which!==t||!n.props.isSubMenu)&&(n._adjustedFocusZoneProps.direction===Vo.vertical||!!n._adjustedFocusZoneProps.checkForNoWrap&&!or(e.target,"data-no-horizontal-wrap"))},n._onMenuKeyDown=function(e){if(!n._onKeyDown(e)&&n._host){var t,o,r=!(!e.altKey&&!e.metaKey),i=e.which===pe,s=e.which===he;if(!r&&(i||s)){var a=i?(t=n._host,o=n._host.lastChild,Qo(t,o,!0,!1,!0,!0)):function(e,t,n){return $o(e,t,!0,!1,!1,n)}(n._host,n._host.firstChild,!0);a&&(a.focus(),e.preventDefault(),e.stopPropagation())}}},n._onScroll=function(){n._isScrollIdle||void 0===n._scrollIdleTimeoutId?n._isScrollIdle=!1:(n._async.clearTimeout(n._scrollIdleTimeoutId),n._scrollIdleTimeoutId=void 0),n._scrollIdleTimeoutId=n._async.setTimeout((function(){n._isScrollIdle=!0}),250)},n._onItemMouseEnterBase=function(e,t,o){n._shouldIgnoreMouseEvent()||n._updateFocusOnMouseEvent(e,t,o)},n._onItemMouseMoveBase=function(e,t,o){var r=t.currentTarget;n._shouldUpdateFocusOnMouseEvent&&(n._gotMouseMove=!0,n._isScrollIdle&&void 0===n._enterTimerId&&r!==n._targetWindow.document.activeElement&&n._updateFocusOnMouseEvent(e,t,o))},n._onMouseItemLeave=function(e,t){if(!n._shouldIgnoreMouseEvent()&&(void 0!==n._enterTimerId&&(n._async.clearTimeout(n._enterTimerId),n._enterTimerId=void 0),void 0===n.state.expandedMenuItemKey))if(n._host.setActive)try{n._host.setActive()}catch(e){}else n._host.focus()},n._onItemMouseDown=function(e,t){e.onMouseDown&&e.onMouseDown(e,t)},n._onItemClick=function(e,t){n._onItemClickBase(e,t,t.currentTarget)},n._onItemClickBase=function(e,t,o){var r=Is(e);n._cancelSubMenuTimer(),_r(e)||r&&r.length?e.key!==n.state.expandedMenuItemKey&&(n.setState({expandedByMouseClick:0!==t.nativeEvent.detail||"mouse"===t.nativeEvent.pointerType}),n._onItemSubMenuExpand(e,o)):n._executeItemClick(e,t),t.stopPropagation(),t.preventDefault()},n._onAnchorClick=function(e,t){n._executeItemClick(e,t),t.stopPropagation()},n._executeItemClick=function(e,t){if(!e.disabled&&!e.isDisabled){var o=!1;e.onClick?o=!!e.onClick(t,e):n.props.onItemClick&&(o=!!n.props.onItemClick(t,e)),!o&&t.defaultPrevented||(n.dismiss(t,!0),n._focusingPreviousElement=!0)}},n._onItemKeyDown=function(e,t){var o=Nt(n.props.theme)?de:me;e.disabled||t.which!==o&&t.which!==oe&&(t.which!==he||!t.altKey&&!t.metaKey)||(n.setState({expandedByMouseClick:!1}),n._onItemSubMenuExpand(e,t.currentTarget),t.preventDefault())},n._cancelSubMenuTimer=function(){void 0!==n._enterTimerId&&(n._async.clearTimeout(n._enterTimerId),n._enterTimerId=void 0)},n._onItemSubMenuExpand=function(e,t){n.state.expandedMenuItemKey!==e.key&&(n.state.expandedMenuItemKey&&n._onSubMenuDismiss(),t.focus(),n.setState({expandedMenuItemKey:e.key,submenuTarget:t}))},n._onSubMenuDismiss=function(e,t){t?n.dismiss(e,t):n._mounted&&n.setState({dismissedMenuItemKey:n.state.expandedMenuItemKey,expandedMenuItemKey:void 0,submenuTarget:void 0})},n._getSubMenuId=function(e){var t=n.state.subMenuId;return e.subMenuProps&&e.subMenuProps.id&&(t=e.subMenuProps.id),t},n._onPointerAndTouchEvent=function(e){n._cancelSubMenuTimer()},n._async=new v(n),n._events=new b(n),ve(n),n.state={contextualMenuItems:void 0,subMenuId:Ie("ContextualMenu")},n._id=t.id||Ie("ContextualMenu"),n._focusingPreviousElement=!1,n._isScrollIdle=!0,n._shouldUpdateFocusOnMouseEvent=!n.props.delayUpdateFocusOnHover,n._gotMouseMove=!1,n}return u(t,e),t.prototype.shouldComponentUpdate=function(e,t){return!(!e.shouldUpdateWhenHidden&&this.props.hidden&&e.hidden)&&(!g(this.props,e)||!g(this.state,t))},t.prototype.UNSAFE_componentWillUpdate=function(e){if(e.target!==this.props.target){var t=e.target;this._setTargetWindowAndElement(t)}this._isHidden(e)!==this._isHidden(this.props)&&(this._isHidden(e)?this._onMenuClosed():(this._onMenuOpened(),this._previousActiveElement=this._targetWindow?this._targetWindow.document.activeElement:void 0)),e.delayUpdateFocusOnHover!==this.props.delayUpdateFocusOnHover&&(this._shouldUpdateFocusOnMouseEvent=!e.delayUpdateFocusOnHover,this._gotMouseMove=this._shouldUpdateFocusOnMouseEvent&&this._gotMouseMove)},t.prototype.UNSAFE_componentWillMount=function(){var e=this.props.target;this._setTargetWindowAndElement(e),this.props.hidden||(this._previousActiveElement=this._targetWindow?this._targetWindow.document.activeElement:void 0)},t.prototype.componentDidMount=function(){this.props.hidden||this._onMenuOpened(),this._mounted=!0},t.prototype.componentWillUnmount=function(){this.props.onMenuDismissed&&this.props.onMenuDismissed(this.props),this._events.dispose(),this._async.dispose(),this._mounted=!1},t.prototype.render=function(){var e=this,t=this.props.isBeakVisible,n=this.props,r=n.items,i=n.labelElementId,s=n.id,a=n.className,u=n.beakWidth,c=n.directionalHint,d=n.directionalHintForRTL,p=n.alignTargetEdge,m=n.gapSpace,h=n.coverTarget,f=n.ariaLabel,v=n.doNotLayer,g=n.target,_=n.bounds,y=n.useTargetWidth,b=n.useTargetAsMinWidth,C=n.directionalHintFixed,E=n.shouldFocusOnMount,I=n.shouldFocusOnContainer,k=n.title,x=n.styles,M=n.theme,w=n.calloutProps,S=n.onRenderSubMenu,D=void 0===S?this._onRenderSubMenu:S,T=n.onRenderMenuList,P=void 0===T?this._onRenderMenuList:T,B=n.focusZoneProps,F=n.getMenuClassNames;this._classNames=F?F(M,a):Cs(x,{theme:M,className:a});var N=function e(t){for(var n=0,o=t;n<o.length;n++){var r=o[n];if(r.iconProps)return!0;if(r.itemType===To.Section&&r.sectionProps&&e(r.sectionProps.items))return!0}return!1}(r);this._adjustedFocusZoneProps=l(l({},B),{direction:this._getFocusZoneDirection()});var R,A=function(e){return e.some((function(e){return!!e.canCheck||!(!e.sectionProps||!e.sectionProps.items.some((function(e){return!0===e.canCheck})))}))}(r),O=this.state.expandedMenuItemKey&&!0!==this.props.hidden?this._getSubmenuProps():null;t=void 0===t?this.props.responsiveMode<=Er.medium:t;var L=this._target;if((y||b)&&L&&L.offsetWidth){var H=L.getBoundingClientRect().width-2;y?R={width:H}:b&&(R={minWidth:H})}if(r&&r.length>0){for(var W=0,K=0,U=r;K<U.length;K++){var j=U[K];if(j.itemType!==To.Divider&&j.itemType!==To.Header)W+=j.customOnRenderListLength?j.customOnRenderListLength:1}var z=this._classNames.subComponentStyles?this._classNames.subComponentStyles.callout:void 0;return o.createElement(Gi,l({styles:z,onRestoreFocus:this._tryFocusPreviousActiveElement},w,{target:g,isBeakVisible:t,beakWidth:u,directionalHint:c,directionalHintForRTL:d,gapSpace:m,coverTarget:h,doNotLayer:v,className:$("ms-ContextualMenu-Callout",w&&w.className),setInitialFocus:E,onDismiss:this.props.onDismiss,onScroll:this._onScroll,bounds:_,directionalHintFixed:C,alignTargetEdge:p,hidden:this.props.hidden}),o.createElement("div",{"aria-label":f,"aria-labelledby":i,style:R,ref:function(t){return e._host=t},id:s,className:this._classNames.container,tabIndex:I?0:-1,onKeyDown:this._onMenuKeyDown,onKeyUp:this._onKeyUp,onFocusCapture:this._onMenuFocusCapture},k&&o.createElement("div",{className:this._classNames.title}," ",k," "),r&&r.length?o.createElement(hr,l({className:this._classNames.root,isCircularNavigation:!0,handleTabKey:Go},this._adjustedFocusZoneProps),P({items:r,totalItemCount:W,hasCheckmarks:A,hasIcons:N,defaultMenuItemRenderer:this._defaultMenuItemRenderer},this._onRenderMenuList)):null,O&&D(O,this._onRenderSubMenu)))}return null},t.prototype._isHidden=function(e){return!!e.hidden},t.prototype._onMenuOpened=function(){this._events.on(this._targetWindow,"resize",this.dismiss),this._shouldUpdateFocusOnMouseEvent=!this.props.delayUpdateFocusOnHover,this._gotMouseMove=!1,this.props.onMenuOpened&&this.props.onMenuOpened(this.props)},t.prototype._onMenuClosed=function(){this._events.off(this._targetWindow,"resize",this.dismiss),this._tryFocusPreviousActiveElement({containsFocus:this._focusingPreviousElement,documentContainsFocus:this._targetWindow.document.hasFocus(),originalElement:this._previousActiveElement}),this._focusingPreviousElement=!1,this.props.onMenuDismissed&&this.props.onMenuDismissed(this.props),this._shouldUpdateFocusOnMouseEvent=!this.props.delayUpdateFocusOnHover,this.setState({expandedByMouseClick:void 0,dismissedMenuItemKey:void 0,expandedMenuItemKey:void 0,submenuTarget:void 0})},t.prototype._getFocusZoneDirection=function(){var e=this.props.focusZoneProps;return e&&void 0!==e.direction?e.direction:Vo.vertical},t.prototype._onRenderSubMenu=function(e,t){throw Error("ContextualMenuBase: onRenderSubMenu callback is null or undefined. Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.")},t.prototype._renderSectionItem=function(e,t,n,r,i){var s,a=this,u=e.sectionProps;if(u){var c,d;if(u.title){var p=void 0,m="";if("string"==typeof u.title){var h=this._id+u.title.replace(/\s/g,"");p={key:"section-"+u.title+"-title",itemType:To.Header,text:u.title,id:h},m=h}else p=u.title,m=this._id+(null===(s=u.title.text)||void 0===s?void 0:s.replace(/\s/g,""));p&&(d={role:"group","aria-labelledby":m},c=this._renderHeaderMenuItem(p,t,n,r,i))}return u.items&&u.items.length>0?o.createElement("li",{role:"presentation",key:u.key||e.key||"section-"+n},o.createElement("div",l({},d),o.createElement("ul",{className:this._classNames.list,role:"menu"},u.topDivider&&this._renderSeparator(n,t,!0,!0),c&&this._renderListItem(c,e.key||n,t,e.title),u.items.map((function(e,t){return a._renderMenuItem(e,t,t,u.items.length,r,i)})),u.bottomDivider&&this._renderSeparator(n,t,!1,!0)))):void 0}},t.prototype._renderListItem=function(e,t,n,r){return o.createElement("li",{role:"presentation",title:r,key:t,className:n.item},e)},t.prototype._renderSeparator=function(e,t,n,r){return r||e>0?o.createElement("li",{role:"separator",key:"separator-"+e+(void 0===n?"":n?"-top":"-bottom"),className:t.divider,"aria-hidden":"true"}):null},t.prototype._renderNormalItem=function(e,t,n,o,r,i,s){return e.onRender?e.onRender(l({"aria-posinset":o+1,"aria-setsize":r},e),this.dismiss):e.href?this._renderAnchorMenuItem(e,t,n,o,r,i,s):e.split&&_r(e)?this._renderSplitButton(e,t,n,o,r,i,s):this._renderButtonItem(e,t,n,o,r,i,s)},t.prototype._renderHeaderMenuItem=function(e,t,n,r,i){var s=this.props.contextualMenuItemAs,a=void 0===s?ls:s,u=e.itemProps,c=e.id,d=u&&Re(u,Ne);return o.createElement("div",l({id:c,className:this._classNames.header},d,{style:e.style}),o.createElement(a,l({item:e,classNames:t,index:n,onCheckmarkClick:r?this._onItemClick:void 0,hasIcons:i},u)))},t.prototype._renderAnchorMenuItem=function(e,t,n,r,i,s,a){var u=this.props.contextualMenuItemAs,l=this.state.expandedMenuItemKey;return o.createElement(fs,{item:e,classNames:t,index:n,focusableElementIndex:r,totalItemCount:i,hasCheckmarks:s,hasIcons:a,contextualMenuItemAs:u,onItemMouseEnter:this._onItemMouseEnterBase,onItemMouseLeave:this._onMouseItemLeave,onItemMouseMove:this._onItemMouseMoveBase,onItemMouseDown:this._onItemMouseDown,executeItemClick:this._executeItemClick,onItemClick:this._onAnchorClick,onItemKeyDown:this._onItemKeyDown,getSubMenuId:this._getSubMenuId,expandedMenuItemKey:l,openSubMenu:this._onItemSubMenuExpand,dismissSubMenu:this._onSubMenuDismiss,dismissMenu:this.dismiss})},t.prototype._renderButtonItem=function(e,t,n,r,i,s,a){var u=this.props.contextualMenuItemAs,l=this.state.expandedMenuItemKey;return o.createElement(vs,{item:e,classNames:t,index:n,focusableElementIndex:r,totalItemCount:i,hasCheckmarks:s,hasIcons:a,contextualMenuItemAs:u,onItemMouseEnter:this._onItemMouseEnterBase,onItemMouseLeave:this._onMouseItemLeave,onItemMouseMove:this._onItemMouseMoveBase,onItemMouseDown:this._onItemMouseDown,executeItemClick:this._executeItemClick,onItemClick:this._onItemClick,onItemClickBase:this._onItemClickBase,onItemKeyDown:this._onItemKeyDown,getSubMenuId:this._getSubMenuId,expandedMenuItemKey:l,openSubMenu:this._onItemSubMenuExpand,dismissSubMenu:this._onSubMenuDismiss,dismissMenu:this.dismiss})},t.prototype._renderSplitButton=function(e,t,n,r,i,s,a){var u=this.props.contextualMenuItemAs,l=this.state.expandedMenuItemKey;return o.createElement(bs,{item:e,classNames:t,index:n,focusableElementIndex:r,totalItemCount:i,hasCheckmarks:s,hasIcons:a,contextualMenuItemAs:u,onItemMouseEnter:this._onItemMouseEnterBase,onItemMouseLeave:this._onMouseItemLeave,onItemMouseMove:this._onItemMouseMoveBase,onItemMouseDown:this._onItemMouseDown,executeItemClick:this._executeItemClick,onItemClick:this._onItemClick,onItemClickBase:this._onItemClickBase,onItemKeyDown:this._onItemKeyDown,openSubMenu:this._onItemSubMenuExpand,dismissSubMenu:this._onSubMenuDismiss,dismissMenu:this.dismiss,expandedMenuItemKey:l,onTap:this._onPointerAndTouchEvent})},t.prototype._isAltOrMeta=function(e){return e.which===re||"Meta"===e.key},t.prototype._shouldIgnoreMouseEvent=function(){return!this._isScrollIdle||!this._gotMouseMove},t.prototype._updateFocusOnMouseEvent=function(e,t,n){var o=this,r=n||t.currentTarget,i=this.props.subMenuHoverDelay,s=void 0===i?250:i;e.key!==this.state.expandedMenuItemKey&&(void 0!==this._enterTimerId&&(this._async.clearTimeout(this._enterTimerId),this._enterTimerId=void 0),void 0===this.state.expandedMenuItemKey&&r.focus(),_r(e)?(t.stopPropagation(),this._enterTimerId=this._async.setTimeout((function(){r.focus(),o.setState({expandedByMouseClick:!0}),o._onItemSubMenuExpand(e,r),o._enterTimerId=void 0}),s)):this._enterTimerId=this._async.setTimeout((function(){o._onSubMenuDismiss(t),r.focus(),o._enterTimerId=void 0}),s))},t.prototype._getSubmenuProps=function(){var e=this.state,t=e.submenuTarget,n=e.expandedMenuItemKey,o=this._findItemByKey(n),r=null;return o&&(r={items:Is(o),target:t,onDismiss:this._onSubMenuDismiss,isSubMenu:!0,id:this.state.subMenuId,shouldFocusOnMount:!0,shouldFocusOnContainer:this.state.expandedByMouseClick,directionalHint:Nt(this.props.theme)?Wo:jo,className:this.props.className,gapSpace:0,isBeakVisible:!1},o.subMenuProps&&_(r,o.subMenuProps)),r},t.prototype._findItemByKey=function(e){var t=this.props.items;return this._findItemByKeyFromItems(e,t)},t.prototype._findItemByKeyFromItems=function(e,t){for(var n=0,o=t;n<o.length;n++){var r=o[n];if(r.itemType===To.Section&&r.sectionProps){var i=this._findItemByKeyFromItems(e,r.sectionProps.items);if(i)return i}else if(r.key&&r.key===e)return r}},t.prototype._setTargetWindowAndElement=function(e){var t=this._host;if(e)if("string"==typeof e){var n=Tt(t);this._target=n?n.querySelector(e):null,this._targetWindow=f(t)}else if(e.stopPropagation)this._targetWindow=f(e.target),this._target=e;else if(void 0===e.left&&void 0===e.x||void 0===e.top&&void 0===e.y)if(void 0!==e.current)this._target=e.current,this._targetWindow=f(this._target);else{var o=e;this._targetWindow=f(o),this._target=e}else this._targetWindow=f(t),this._target=e;else this._targetWindow=f(t)},t.defaultProps={items:[],shouldFocusOnMount:!0,gapSpace:0,directionalHint:Ho,beakWidth:16},t=d([Pr],t)}(o.Component),Ms={root:"ms-ContextualMenu",container:"ms-ContextualMenu-container",list:"ms-ContextualMenu-list",header:"ms-ContextualMenu-header",title:"ms-ContextualMenu-title",isopen:"is-open"};function ws(e){return o.createElement(Ss,l({},e))}var Ss=et(xs,(function(e){var t=e.className,n=e.theme,o=Gn(Ms,n),r=n.fonts,i=n.semanticColors,s=n.effects;return{root:[n.fonts.medium,o.root,o.isopen,{backgroundColor:i.menuBackground,minWidth:"180px"},t],container:[o.container,{selectors:{":focus":{outline:0}}}],list:[o.list,o.isopen,{listStyleType:"none",margin:"0",padding:"0"}],header:[o.header,r.small,{fontWeight:On.semibold,color:i.menuHeader,background:"none",backgroundColor:"transparent",border:"none",height:36,lineHeight:36,cursor:"default",padding:"0px 6px",userSelect:"none",textAlign:"left"}],title:[o.title,{fontSize:r.mediumPlus.fontSize,paddingRight:"14px",paddingLeft:"14px",paddingBottom:"5px",paddingTop:"5px",backgroundColor:i.menuItemBackgroundPressed}],subComponentStyles:{callout:{root:{boxShadow:s.elevation8}},menuItem:{}}}}),(function(){return{onRenderSubMenu:ws}}),{scope:"ContextualMenu"}),Ds=Ss,Ts={msButton:"ms-Button",msButtonHasMenu:"ms-Button--hasMenu",msButtonIcon:"ms-Button-icon",msButtonMenuIcon:"ms-Button-menuIcon",msButtonLabel:"ms-Button-label",msButtonDescription:"ms-Button-description",msButtonScreenReaderText:"ms-Button-screenReaderText",msButtonFlexContainer:"ms-Button-flexContainer",msButtonTextContainer:"ms-Button-textContainer"},Ps=Y((function(e,t,n,o,r,i,s,a,u,l,c){var d,p,m=Gn(Ts,e||{}),h=l&&!c;return St({root:[m.msButton,t.root,o,u&&["is-checked",t.rootChecked],h&&["is-expanded",t.rootExpanded,{selectors:(d={},d[":hover ."+m.msButtonIcon]=t.iconExpandedHovered,d[":hover ."+m.msButtonMenuIcon]=t.menuIconExpandedHovered||t.rootExpandedHovered,d[":hover"]=t.rootExpandedHovered,d)}],a&&[Ts.msButtonHasMenu,t.rootHasMenu],s&&["is-disabled",t.rootDisabled],!s&&!h&&!u&&{selectors:(p={":hover":t.rootHovered},p[":hover ."+m.msButtonLabel]=t.labelHovered,p[":hover ."+m.msButtonIcon]=t.iconHovered,p[":hover ."+m.msButtonDescription]=t.descriptionHovered,p[":hover ."+m.msButtonMenuIcon]=t.menuIconHovered,p[":focus"]=t.rootFocused,p[":active"]=t.rootPressed,p[":active ."+m.msButtonIcon]=t.iconPressed,p[":active ."+m.msButtonDescription]=t.descriptionPressed,p[":active ."+m.msButtonMenuIcon]=t.menuIconPressed,p)},s&&u&&[t.rootCheckedDisabled],!s&&u&&{selectors:{":hover":t.rootCheckedHovered,":active":t.rootCheckedPressed}},n],flexContainer:[m.msButtonFlexContainer,t.flexContainer],textContainer:[m.msButtonTextContainer,t.textContainer],icon:[m.msButtonIcon,r,t.icon,h&&t.iconExpanded,u&&t.iconChecked,s&&t.iconDisabled],label:[m.msButtonLabel,t.label,u&&t.labelChecked,s&&t.labelDisabled],menuIcon:[m.msButtonMenuIcon,i,t.menuIcon,u&&t.menuIconChecked,s&&!c&&t.menuIconDisabled,!s&&!h&&!u&&{selectors:{":hover":t.menuIconHovered,":active":t.menuIconPressed}},h&&["is-expanded",t.menuIconExpanded]],description:[m.msButtonDescription,t.description,u&&t.descriptionChecked,s&&t.descriptionDisabled],screenReaderText:[m.msButtonScreenReaderText,t.screenReaderText]})})),Bs=Y((function(e,t,n,o,r){return{root:qt(e.splitButtonMenuButton,n&&[e.splitButtonMenuButtonExpanded],t&&[e.splitButtonMenuButtonDisabled],o&&!t&&[e.splitButtonMenuButtonChecked]),splitButtonContainer:qt(e.splitButtonContainer,!t&&o&&[e.splitButtonContainerChecked,{selectors:{":hover":e.splitButtonContainerCheckedHovered}}],!t&&!o&&[{selectors:{":hover":e.splitButtonContainerHovered,":focus":e.splitButtonContainerFocused}}],t&&e.splitButtonContainerDisabled),icon:qt(e.splitButtonMenuIcon,t&&e.splitButtonMenuIconDisabled,!t&&r&&e.splitButtonMenuIcon),flexContainer:qt(e.splitButtonFlexContainer),divider:qt(e.splitButtonDivider,(r||t)&&e.splitButtonDividerDisabled)}})),Fs=function(e){function t(t){var n=e.call(this,t)||this;return n._buttonElement=o.createRef(),n._splitButtonContainer=o.createRef(),n._mergedRef=Ze(),n._renderedVisibleMenu=!1,n._getMemoizedMenuButtonKeytipProps=Y((function(e){return l(l({},e),{hasMenu:!0})})),n._onRenderIcon=function(e,t){var r=n.props.iconProps;if(r&&(void 0!==r.iconName||r.imageProps)){var i=r.className,s=r.imageProps,a=c(r,["className","imageProps"]);if(r.styles)return o.createElement(Do,l({className:$(n._classNames.icon,i),imageProps:s},a));if(r.iconName)return o.createElement(wo,l({className:$(n._classNames.icon,i)},a));if(s)return o.createElement(Po,l({className:$(n._classNames.icon,i),imageProps:s},a))}return null},n._onRenderTextContents=function(){var e=n.props,t=e.text,r=e.children,i=e.secondaryText,s=void 0===i?n.props.description:i,a=e.onRenderText,u=void 0===a?n._onRenderText:a,l=e.onRenderDescription,c=void 0===l?n._onRenderDescription:l;return t||"string"==typeof r||s?o.createElement("span",{className:n._classNames.textContainer},u(n.props,n._onRenderText),c(n.props,n._onRenderDescription)):[u(n.props,n._onRenderText),c(n.props,n._onRenderDescription)]},n._onRenderText=function(){var e=n.props.text,t=n.props.children;return void 0===e&&"string"==typeof t&&(e=t),n._hasText()?o.createElement("span",{key:n._labelId,className:n._classNames.label,id:n._labelId},e):null},n._onRenderChildren=function(){var e=n.props.children;return"string"==typeof e?null:e},n._onRenderDescription=function(e){var t=e.secondaryText,r=void 0===t?n.props.description:t;return r?o.createElement("span",{key:n._descriptionId,className:n._classNames.description,id:n._descriptionId},r):null},n._onRenderAriaDescription=function(){var e=n.props.ariaDescription;return e?o.createElement("span",{className:n._classNames.screenReaderText,id:n._ariaDescriptionId},e):null},n._onRenderMenuIcon=function(e){var t=n.props.menuIconProps;return o.createElement(wo,l({iconName:"ChevronDown"},t,{className:n._classNames.menuIcon}))},n._onRenderMenu=function(e){var t=n.props.persistMenu,r=n.state.menuHidden,i=n.props.menuAs||Ds;return e.ariaLabel||e.labelElementId||!n._hasText()||(e=l(l({},e),{labelElementId:n._labelId})),o.createElement(i,l({id:n._labelId+"-menu",directionalHint:Ao},e,{shouldFocusOnContainer:n._menuShouldFocusOnContainer,shouldFocusOnMount:n._menuShouldFocusOnMount,hidden:t?r:void 0,className:$("ms-BaseButton-menuhost",e.className),target:n._isSplitButton?n._splitButtonContainer.current:n._buttonElement.current,onDismiss:n._onDismissMenu}))},n._onDismissMenu=function(e){var t=n.props.menuProps;t&&t.onDismiss&&t.onDismiss(e),e&&e.defaultPrevented||n._dismissMenu()},n._dismissMenu=function(){n._menuShouldFocusOnMount=void 0,n._menuShouldFocusOnContainer=void 0,n.setState({menuHidden:!0})},n._openMenu=function(e,t){void 0===t&&(t=!0),n.props.menuProps&&(n._menuShouldFocusOnContainer=e,n._menuShouldFocusOnMount=t,n._renderedVisibleMenu=!0,n.setState({menuHidden:!1}))},n._onToggleMenu=function(e){var t=!0;n.props.menuProps&&!1===n.props.menuProps.shouldFocusOnMount&&(t=!1),n.state.menuHidden?n._openMenu(e,t):n._dismissMenu()},n._onSplitContainerFocusCapture=function(e){var t=n._splitButtonContainer.current;!t||e.target&&te(e.target,t)||t.focus()},n._onSplitButtonPrimaryClick=function(e){n.state.menuHidden||n._dismissMenu(),!n._processingTouch&&n.props.onClick?n.props.onClick(e):n._processingTouch&&n._onMenuClick(e)},n._onKeyDown=function(e){!n.props.disabled||e.which!==oe&&e.which!==se?n.props.disabled||(n.props.menuProps?n._onMenuKeyDown(e):void 0!==n.props.onKeyDown&&n.props.onKeyDown(e)):(e.preventDefault(),e.stopPropagation())},n._onKeyUp=function(e){n.props.disabled||void 0===n.props.onKeyUp||n.props.onKeyUp(e)},n._onKeyPress=function(e){n.props.disabled||void 0===n.props.onKeyPress||n.props.onKeyPress(e)},n._onMouseUp=function(e){n.props.disabled||void 0===n.props.onMouseUp||n.props.onMouseUp(e)},n._onMouseDown=function(e){n.props.disabled||void 0===n.props.onMouseDown||n.props.onMouseDown(e)},n._onClick=function(e){n.props.disabled||(n.props.menuProps?n._onMenuClick(e):void 0!==n.props.onClick&&n.props.onClick(e))},n._onSplitButtonContainerKeyDown=function(e){e.which===oe||e.which===se?n._buttonElement.current&&(n._buttonElement.current.click(),e.preventDefault(),e.stopPropagation()):n._onMenuKeyDown(e)},n._onMenuKeyDown=function(e){if(!n.props.disabled){n.props.onKeyDown&&n.props.onKeyDown(e);var t=e.which===pe,o=e.which===he;if(!e.defaultPrevented&&n._isValidMenuOpenKey(e)){var r=n.props.onMenuClick;r&&r(e,n.props),n._onToggleMenu(!1),e.preventDefault(),e.stopPropagation()}if(!e.altKey&&!e.metaKey&&(t||o))if(!n.state.menuHidden&&n.props.menuProps)(void 0!==n._menuShouldFocusOnMount?n._menuShouldFocusOnMount:n.props.menuProps.shouldFocusOnMount)||(e.preventDefault(),e.stopPropagation(),n._menuShouldFocusOnMount=!0,n.forceUpdate())}},n._onTouchStart=function(){!n._isSplitButton||!n._splitButtonContainer.current||"onpointerdown"in n._splitButtonContainer.current||n._handleTouchAndPointerEvent()},n._onMenuClick=function(e){var t=n.props.onMenuClick;if(t&&t(e,n.props),!e.defaultPrevented){var o=0!==e.nativeEvent.detail||"mouse"===e.nativeEvent.pointerType;n._onToggleMenu(o),e.preventDefault(),e.stopPropagation()}},ve(n),n._async=new v(n),n._events=new b(n),n.props.split,n._labelId=Ie(),n._descriptionId=Ie(),n._ariaDescriptionId=Ie(),n.state={menuHidden:!0},n}return u(t,e),Object.defineProperty(t.prototype,"_isSplitButton",{get:function(){return!!this.props.menuProps&&!!this.props.onClick&&!0===this.props.split},enumerable:!0,configurable:!0}),t.prototype.render=function(){var e,t=this.props,n=t.ariaDescription,o=t.ariaLabel,r=t.ariaHidden,i=t.className,s=t.disabled,a=t.allowDisabledFocus,u=t.primaryDisabled,l=t.secondaryText,c=void 0===l?this.props.description:l,d=t.href,p=t.iconProps,m=t.menuIconProps,h=t.styles,f=t.checked,v=t.variantClassName,g=t.theme,y=t.toggle,b=t.getClassNames,C=t.role,E=this.state.menuHidden,k=s||u;this._classNames=b?b(g,i,v,p&&p.className,m&&m.className,k,f,!E,!!this.props.menuProps,this.props.split,!!a):Ps(g,h,i,v,p&&p.className,m&&m.className,k,!!this.props.menuProps,f,!E,this.props.split);var x=this._ariaDescriptionId,M=this._labelId,w=this._descriptionId,S=!k&&!!d,D=S?"a":"button",T=Re(_(S?{}:{type:"button"},this.props.rootProps,this.props),S?Pe:Be,["disabled"]),P=o||T["aria-label"],B=void 0;n?B=x:c&&this.props.onRenderDescription!==I?B=w:T["aria-describedby"]&&(B=T["aria-describedby"]);var F=void 0;P||(T["aria-labelledby"]?F=T["aria-labelledby"]:B&&(F=this._hasText()?M:void 0));var N=!(!1===this.props["data-is-focusable"]||s&&!a||this._isSplitButton),R="menuitemcheckbox"===C||"checkbox"===C,A=R||!0===y?!!f:void 0,O=_(T,((e={className:this._classNames.root,ref:this._mergedRef(this.props.elementRef,this._buttonElement),disabled:k&&!a,onKeyDown:this._onKeyDown,onKeyPress:this._onKeyPress,onKeyUp:this._onKeyUp,onMouseDown:this._onMouseDown,onMouseUp:this._onMouseUp,onClick:this._onClick,"aria-label":P,"aria-labelledby":F,"aria-describedby":B,"aria-disabled":k,"data-is-focusable":N})[R?"aria-checked":"aria-pressed"]=A,e));return r&&(O["aria-hidden"]=!0),this._isSplitButton?this._onRenderSplitButtonContent(D,O):(this.props.menuProps&&_(O,{"aria-expanded":!E,"aria-owns":E?null:this._labelId+"-menu","aria-haspopup":!0}),this._onRenderContent(D,O))},t.prototype.componentDidMount=function(){this._isSplitButton&&this._splitButtonContainer.current&&("onpointerdown"in this._splitButtonContainer.current&&this._events.on(this._splitButtonContainer.current,"pointerdown",this._onPointerDown,!0),"onpointerup"in this._splitButtonContainer.current&&this.props.onPointerUp&&this._events.on(this._splitButtonContainer.current,"pointerup",this.props.onPointerUp,!0))},t.prototype.componentDidUpdate=function(e,t){this.props.onAfterMenuDismiss&&!t.menuHidden&&this.state.menuHidden&&this.props.onAfterMenuDismiss()},t.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},t.prototype.focus=function(){this._isSplitButton&&this._splitButtonContainer.current?this._splitButtonContainer.current.focus():this._buttonElement.current&&this._buttonElement.current.focus()},t.prototype.dismissMenu=function(){this._dismissMenu()},t.prototype.openMenu=function(e,t){this._openMenu(e,t)},t.prototype._onRenderContent=function(e,t){var n=this,r=this.props,i=e,s=r.menuIconProps,a=r.menuProps,u=r.onRenderIcon,c=void 0===u?this._onRenderIcon:u,d=r.onRenderAriaDescription,p=void 0===d?this._onRenderAriaDescription:d,m=r.onRenderChildren,h=void 0===m?this._onRenderChildren:m,f=r.onRenderMenu,v=void 0===f?this._onRenderMenu:f,g=r.onRenderMenuIcon,_=void 0===g?this._onRenderMenuIcon:g,y=r.disabled,b=r.keytipProps;b&&a&&(b=this._getMemoizedMenuButtonKeytipProps(b));var C=function(e){return o.createElement(i,l({},t,e),o.createElement("span",{className:n._classNames.flexContainer,"data-automationid":"splitbuttonprimary"},c(r,n._onRenderIcon),n._onRenderTextContents(),p(r,n._onRenderAriaDescription),h(r,n._onRenderChildren),!n._isSplitButton&&(a||s||n.props.onRenderMenuIcon)&&_(n.props,n._onRenderMenuIcon),a&&!a.doNotLayer&&n._shouldRenderMenu()&&v(a,n._onRenderMenu)))},E=b?o.createElement(hs,{keytipProps:this._isSplitButton?void 0:b,ariaDescribedBy:t["aria-describedby"],disabled:y},(function(e){return C(e)})):C();return a&&a.doNotLayer?o.createElement("span",{style:{display:"inline-block"}},E,this._shouldRenderMenu()&&v(a,this._onRenderMenu)):o.createElement(o.Fragment,null,E,o.createElement(Ke,null))},t.prototype._shouldRenderMenu=function(){var e=this.state.menuHidden,t=this.props,n=t.persistMenu,o=t.renderPersistedMenuHiddenOnMount;return!e||!(!n||!this._renderedVisibleMenu&&!o)},t.prototype._hasText=function(){return null!==this.props.text&&(void 0!==this.props.text||"string"==typeof this.props.children)},t.prototype._onRenderSplitButtonContent=function(e,t){var n=this,r=this.props,i=r.styles,s=void 0===i?{}:i,a=r.disabled,u=r.allowDisabledFocus,c=r.checked,d=r.getSplitButtonClassNames,p=r.primaryDisabled,m=r.menuProps,h=r.toggle,f=r.role,v=r.primaryActionButtonProps,g=this.props.keytipProps,y=this.state.menuHidden,b=d?d(!!a,!y,!!c,!!u):s&&Bs(s,!!a,!y,!!c,!!p);_(t,{onClick:void 0,onPointerDown:void 0,onPointerUp:void 0,tabIndex:-1,"data-is-focusable":!1}),g&&m&&(g=this._getMemoizedMenuButtonKeytipProps(g));var C=Re(t,[],["disabled"]);v&&_(t,v);var E=function(r){return o.createElement("div",l({},C,{"data-ktp-target":r?r["data-ktp-target"]:void 0,role:f||"button","aria-disabled":a,"aria-haspopup":!0,"aria-expanded":!y,"aria-pressed":h?!!c:void 0,"aria-describedby":qe(t["aria-describedby"],r?r["aria-describedby"]:void 0),className:b&&b.splitButtonContainer,onKeyDown:n._onSplitButtonContainerKeyDown,onTouchStart:n._onTouchStart,ref:n._splitButtonContainer,"data-is-focusable":!0,onClick:a||p?void 0:n._onSplitButtonPrimaryClick,tabIndex:!a||u?0:void 0,"aria-roledescription":t["aria-roledescription"],onFocusCapture:n._onSplitContainerFocusCapture}),o.createElement("span",{style:{display:"flex"}},n._onRenderContent(e,t),n._onRenderSplitButtonMenuButton(b,r),n._onRenderSplitButtonDivider(b)))};return g?o.createElement(hs,{keytipProps:g,disabled:a},(function(e){return E(e)})):E()},t.prototype._onRenderSplitButtonDivider=function(e){if(e&&e.divider){return o.createElement("span",{className:e.divider,"aria-hidden":!0,onClick:function(e){e.stopPropagation()}})}return null},t.prototype._onRenderSplitButtonMenuButton=function(e,n){var r=this.props,i=r.allowDisabledFocus,s=r.checked,a=r.disabled,u=r.splitButtonMenuProps,c=r.splitButtonAriaLabel,d=this.state.menuHidden,p=this.props.menuIconProps;void 0===p&&(p={iconName:"ChevronDown"});var m=l(l({},u),{styles:e,checked:s,disabled:a,allowDisabledFocus:i,onClick:this._onMenuClick,menuProps:void 0,iconProps:l(l({},p),{className:this._classNames.menuIcon}),ariaLabel:c,"aria-haspopup":!0,"aria-expanded":!d,"data-is-focusable":!1});return o.createElement(t,l({},m,{"data-ktp-execute-target":n?n["data-ktp-execute-target"]:n,onMouseDown:this._onMouseDown,tabIndex:-1}))},t.prototype._onPointerDown=function(e){var t=this.props.onPointerDown;t&&t(e),"touch"===e.pointerType&&(this._handleTouchAndPointerEvent(),e.preventDefault(),e.stopImmediatePropagation())},t.prototype._handleTouchAndPointerEvent=function(){var e=this;void 0!==this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout((function(){e._processingTouch=!1,e._lastTouchTimeoutId=void 0,e.focus()}),500)},t.prototype._isValidMenuOpenKey=function(e){return this.props.menuTriggerKeyCode?e.which===this.props.menuTriggerKeyCode:!!this.props.menuProps&&(e.which===he&&(e.altKey||e.metaKey))},t.defaultProps={baseClassName:"ms-Button",styles:{},split:!1},t}(o.Component),Ns={outline:0},Rs=function(e){return{fontSize:e,margin:"0 4px",height:"16px",lineHeight:"16px",textAlign:"center",flexShrink:0}},As=Y((function(e){var t,n,o=e.semanticColors,r=e.effects,i=e.fonts,s=o.buttonBorder,a=o.disabledBackground,u=o.disabledText,l={left:-2,top:-2,bottom:-2,right:-2,outlineColor:"ButtonText"};return{root:[jn(e,{inset:1,highContrastStyle:l,borderColor:"transparent"}),e.fonts.medium,{boxSizing:"border-box",border:"1px solid "+s,userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",padding:"0 16px",borderRadius:r.roundedCorner2,selectors:{":active > *":{position:"relative",left:0,top:0}}}],rootDisabled:[jn(e,{inset:1,highContrastStyle:l,borderColor:"transparent"}),{backgroundColor:a,borderColor:a,color:u,cursor:"default",pointerEvents:"none",selectors:{":hover":Ns,":focus":Ns}}],iconDisabled:{color:u,selectors:(t={},t[Kn]={color:"GrayText"},t)},menuIconDisabled:{color:u,selectors:(n={},n[Kn]={color:"GrayText"},n)},flexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},description:{display:"block"},textContainer:{flexGrow:1,display:"block"},icon:Rs(i.mediumPlus.fontSize),menuIcon:Rs(i.small.fontSize),label:{margin:"0 4px",lineHeight:"100%",display:"block"},screenReaderText:qn}})),Os=Y((function(e,t){var n,o,r,i,s,a,u,c,d,p,m,h,f,v=e.effects,g=e.palette,_=e.semanticColors,y={position:"absolute",width:1,right:31,top:8,bottom:8};return N({splitButtonContainer:[jn(e,{highContrastStyle:{left:-2,top:-2,bottom:-2,right:-2,border:"none"},inset:2}),{display:"inline-flex",selectors:{".ms-Button--default":{borderTopRightRadius:"0",borderBottomRightRadius:"0",borderRight:"none"},".ms-Button--primary":{borderTopRightRadius:"0",borderBottomRightRadius:"0",border:"none",selectors:(n={},n[Kn]=l({color:"WindowText",backgroundColor:"Window",border:"1px solid WindowText",borderRightWidth:"0"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),n)},".ms-Button--primary + .ms-Button":{border:"none",selectors:(o={},o[Kn]={border:"1px solid WindowText",borderLeftWidth:"0"},o)}}}],splitButtonContainerHovered:{selectors:{".ms-Button--primary":{selectors:(r={},r[Kn]={color:"Window",backgroundColor:"Highlight"},r)},".ms-Button.is-disabled":{color:_.buttonTextDisabled,selectors:(i={},i[Kn]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},i)}}},splitButtonContainerChecked:{selectors:{".ms-Button--primary":{selectors:(s={},s[Kn]=l({color:"Window",backgroundColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),s)}}},splitButtonContainerCheckedHovered:{selectors:{".ms-Button--primary":{selectors:(a={},a[Kn]=l({color:"Window",backgroundColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),a)}}},splitButtonContainerFocused:{outline:"none!important"},splitButtonMenuButton:(u={padding:6,height:"auto",boxSizing:"border-box",borderRadius:0,borderTopRightRadius:v.roundedCorner2,borderBottomRightRadius:v.roundedCorner2,border:"1px solid "+g.neutralSecondaryAlt,borderLeft:"none",outline:"transparent",userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",verticalAlign:"top",width:32,marginLeft:-1,marginTop:0,marginRight:0,marginBottom:0},u[Kn]={".ms-Button-menuIcon":{color:"WindowText"}},u),splitButtonDivider:l(l({},y),{selectors:(c={},c[Kn]={backgroundColor:"WindowText"},c)}),splitButtonDividerDisabled:l(l({},y),{selectors:(d={},d[Kn]={backgroundColor:"GrayText"},d)}),splitButtonMenuButtonDisabled:{pointerEvents:"none",border:"none",selectors:(p={":hover":{cursor:"default"},".ms-Button--primary":{selectors:(m={},m[Kn]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},m)},".ms-Button-menuIcon":{selectors:(h={},h[Kn]={color:"GrayText"},h)}},p[Kn]={color:"GrayText",border:"1px solid GrayText",backgroundColor:"Window"},p)},splitButtonFlexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},splitButtonContainerDisabled:{outline:"none",border:"none",selectors:(f={},f[Kn]=l({color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),f)}},t)}));var Ls=Y((function(e,t,n){var o=As(e),r=Os(e);return N(o,{root:{minWidth:"80px",height:"32px"},label:{fontWeight:On.semibold}},n?function(e){var t,n,o,r,i,s,a,u,c,d=e.palette,p=e.semanticColors;return{root:{backgroundColor:p.primaryButtonBackground,border:"1px solid "+p.primaryButtonBackground,color:p.primaryButtonText,selectors:(t={},t[Kn]=l({color:"Window",backgroundColor:"WindowText",borderColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),t[".ms-Fabric--isFocusVisible &:focus"]={selectors:{":after":{border:"none",outlineColor:d.white}}},t)},rootHovered:{backgroundColor:p.primaryButtonBackgroundHovered,border:"1px solid "+p.primaryButtonBackgroundHovered,color:p.primaryButtonTextHovered,selectors:(n={},n[Kn]={color:"Window",backgroundColor:"Highlight",borderColor:"Highlight"},n)},rootPressed:{backgroundColor:p.primaryButtonBackgroundPressed,border:"1px solid "+p.primaryButtonBackgroundPressed,color:p.primaryButtonTextPressed,selectors:(o={},o[Kn]=l({color:"Window",backgroundColor:"WindowText",borderColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),o)},rootExpanded:{backgroundColor:p.primaryButtonBackgroundPressed,color:p.primaryButtonTextPressed},rootChecked:{backgroundColor:p.primaryButtonBackgroundPressed,color:p.primaryButtonTextPressed},rootCheckedHovered:{backgroundColor:p.primaryButtonBackgroundPressed,color:p.primaryButtonTextPressed},rootDisabled:{color:p.primaryButtonTextDisabled,backgroundColor:p.primaryButtonBackgroundDisabled,selectors:(r={},r[Kn]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},r)},splitButtonContainer:{selectors:(i={},i[Kn]={border:"none"},i)},splitButtonDivider:l(l({},{position:"absolute",width:1,right:31,top:8,bottom:8}),{backgroundColor:d.white,selectors:(s={},s[Kn]={backgroundColor:"Window"},s)}),splitButtonMenuButton:{backgroundColor:p.primaryButtonBackground,color:p.primaryButtonText,selectors:(a={},a[Kn]={backgroundColor:"WindowText"},a[":hover"]={backgroundColor:p.primaryButtonBackgroundHovered,selectors:(u={},u[Kn]={color:"Highlight"},u)},a)},splitButtonMenuButtonDisabled:{backgroundColor:p.primaryButtonBackgroundDisabled,selectors:{":hover":{backgroundColor:p.primaryButtonBackgroundDisabled}}},splitButtonMenuButtonChecked:{backgroundColor:p.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:p.primaryButtonBackgroundPressed}}},splitButtonMenuButtonExpanded:{backgroundColor:p.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:p.primaryButtonBackgroundPressed}}},splitButtonMenuIcon:{color:p.primaryButtonText},splitButtonMenuIconDisabled:{color:d.neutralTertiary,selectors:(c={},c[Kn]={color:"GrayText"},c)}}}(e):function(e){var t,n,o,r,i,s=e.semanticColors,a=e.palette,u=s.buttonBackground,c=s.buttonBackgroundPressed,d=s.buttonBackgroundHovered,p=s.buttonBackgroundDisabled,m=s.buttonText,h=s.buttonTextHovered,f=s.buttonTextDisabled,v=s.buttonTextChecked,g=s.buttonTextCheckedHovered;return{root:{backgroundColor:u,color:m},rootHovered:{backgroundColor:d,color:h,selectors:(t={},t[Kn]={borderColor:"Highlight",color:"Highlight"},t)},rootPressed:{backgroundColor:c,color:v},rootExpanded:{backgroundColor:c,color:v},rootChecked:{backgroundColor:c,color:v},rootCheckedHovered:{backgroundColor:c,color:g},rootDisabled:{color:f,backgroundColor:p,selectors:(n={},n[Kn]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},n)},splitButtonContainer:{selectors:(o={},o[Kn]={border:"none"},o)},splitButtonMenuButton:{color:a.white,backgroundColor:"transparent",selectors:{":hover":{backgroundColor:a.neutralLight,selectors:(r={},r[Kn]={color:"Highlight"},r)}}},splitButtonMenuButtonDisabled:{backgroundColor:s.buttonBackgroundDisabled,selectors:{":hover":{backgroundColor:s.buttonBackgroundDisabled}}},splitButtonDivider:l(l({},{position:"absolute",width:1,right:31,top:8,bottom:8}),{backgroundColor:a.neutralTertiaryAlt,selectors:(i={},i[Kn]={backgroundColor:"WindowText"},i)}),splitButtonDividerDisabled:{backgroundColor:e.palette.neutralTertiaryAlt},splitButtonMenuButtonChecked:{backgroundColor:a.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:a.neutralQuaternaryAlt}}},splitButtonMenuButtonExpanded:{backgroundColor:a.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:a.neutralQuaternaryAlt}}},splitButtonMenuIcon:{color:s.buttonText},splitButtonMenuIconDisabled:{color:s.buttonTextDisabled}}}(e),r,t)})),Hs=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.render=function(){var e=this.props,t=e.primary,n=void 0!==t&&t,r=e.styles,i=e.theme;return o.createElement(Fs,l({},this.props,{variantClassName:n?"ms-Button--primary":"ms-Button--default",styles:Ls(i,r,n),onRenderDescription:I}))},t=d([R("DefaultButton",["theme","styles"],!0)],t)}(o.Component),Ws=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.render=function(){return o.createElement(Hs,l({},this.props,{primary:!0,onRenderDescription:I}))},t=d([R("PrimaryButton",["theme","styles"],!0)],t)}(o.Component);function Ks(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],o=!0,r=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{o||null==a.return||a.return()}finally{if(r)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Us(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Us(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Us(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}var js=function(e){var t=Ks(r.a.useState(0),2),n=t[0],o=t[1];return r.a.useEffect((function(){return console.log("Button counter "+n),function(){console.log("Hello")}}),[n]),r.a.createElement("div",null,r.a.createElement(Ws,{styles:{root:{background:"red",margin:20}},text:e.text,onClick:function(){o(n+1)}}),r.a.createElement("text",null,"".concat(n.toString(),n%2==0?" este par":" este impar")))},zs=function(){return o.createElement("footer",{style:{border:"1px solid red"}},"Some text")},qs=function(){return o.createElement("div",{className:qt({border:"1px solid green"})},o.createElement("article",null,"This is an article"),o.createElement(zs,null))},Vs=function(e){return o.createElement("div",{style:{border:"1px solid black"}},o.createElement("p",null,"Custom Layout"),e.children)},Gs=function(e){return r.a.createElement("li",{style:(t=e.book.isSelected,{background:t?"green":"white"}),onClick:e.onClick},e.book.isSelected?"".concat(e.book.title," is selected"):e.book.title);var t};function Zs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function Ys(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Zs(Object(n),!0).forEach((function(t){Xs(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Zs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Xs(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Qs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],o=!0,r=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{o||null==a.return||a.return()}finally{if(r)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return $s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return $s(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}var Js=function(e){var t=Qs(r.a.useState(e.books),2),n=t[0],o=t[1],i=function(e){var t,r=e.target.textContent,i=(t=r,n.map((function(e){return e.title===t?Ys(Ys({},e),{},{isSelected:!0}):Ys(Ys({},e),{},{isSelected:!1})})));o(i)};return r.a.createElement("ul",{style:{width:250}},n.map((function(e){return r.a.createElement(Gs,{book:e,onClick:i})})))};function ea(e){return(ea="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ta(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function na(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function oa(e,t){return(oa=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ra(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=sa(e);if(t){var r=sa(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return ia(this,n)}}function ia(e,t){return!t||"object"!==ea(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function sa(e){return(sa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var aa=function(e){return r.a.createElement("h1",null,e.text)},ua=(r.a.Component,[{title:"Book 1"},{title:"Book 2"},{title:"Book 3"}]),la=function(){return r.a.createElement("div",null,r.a.createElement(Vs,null,r.a.createElement(aa,{text:"hello"}),r.a.createElement(qs,null),r.a.createElement(Js,{books:ua}),r.a.createElement(js,{text:"Counter Button"})))};s.a.render(o.createElement(la,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,